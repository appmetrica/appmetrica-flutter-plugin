// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.appmetrica.analytics.flutter.pigeon;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  public enum AppMetricaDeferredDeeplinkReasonPigeon {
    NOT_A_FIRST_LAUNCH(0),
    PARSE_ERROR(1),
    UNKNOWN(2),
    NO_REFERRER(3),
    NO_ERROR(4);

    final int index;

    private AppMetricaDeferredDeeplinkReasonPigeon(final int index) {
      this.index = index;
    }
  }

  public enum UserProfileAttributeType {
    BIRTH_DATE(0),
    BOOLEAN(1),
    COUNTER(2),
    GENDER(3),
    NAME(4),
    NOTIFICATION_ENABLED(5),
    NUMBER(6),
    STRING(7);

    final int index;

    private UserProfileAttributeType(final int index) {
      this.index = index;
    }
  }

  public enum GenderPigeon {
    MALE(0),
    FEMALE(1),
    OTHER(2),
    UNDEFINED(3);

    final int index;

    private GenderPigeon(final int index) {
      this.index = index;
    }
  }

  public enum AdTypePigeon {
    UNKNOWN(0),
    NATIVE(1),
    BANNER(2),
    REWARDED(3),
    INTERSTITIAL(4),
    MREC(5),
    APP_OPEN(6),
    OTHER(7);

    final int index;

    private AdTypePigeon(final int index) {
      this.index = index;
    }
  }

  public enum StartupParamsItemStatusPigeon {
    FEATURE_DISABLED(0),
    INVALID_VALUE_FROM_PROVIDER(1),
    NETWORK_ERROR(2),
    OK(3),
    PROVIDER_UNAVAILABLE(4),
    UNKNOWN_ERROR(5);

    final int index;

    private StartupParamsItemStatusPigeon(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppMetricaConfigPigeon {
    private @NonNull String apiKey;

    public @NonNull String getApiKey() {
      return apiKey;
    }

    public void setApiKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"apiKey\" is null.");
      }
      this.apiKey = setterArg;
    }

    private @Nullable Boolean advIdentifiersTracking;

    public @Nullable Boolean getAdvIdentifiersTracking() {
      return advIdentifiersTracking;
    }

    public void setAdvIdentifiersTracking(@Nullable Boolean setterArg) {
      this.advIdentifiersTracking = setterArg;
    }

    private @Nullable Boolean anrMonitoring;

    public @Nullable Boolean getAnrMonitoring() {
      return anrMonitoring;
    }

    public void setAnrMonitoring(@Nullable Boolean setterArg) {
      this.anrMonitoring = setterArg;
    }

    private @Nullable Long anrMonitoringTimeout;

    public @Nullable Long getAnrMonitoringTimeout() {
      return anrMonitoringTimeout;
    }

    public void setAnrMonitoringTimeout(@Nullable Long setterArg) {
      this.anrMonitoringTimeout = setterArg;
    }

    private @Nullable Long appBuildNumber;

    public @Nullable Long getAppBuildNumber() {
      return appBuildNumber;
    }

    public void setAppBuildNumber(@Nullable Long setterArg) {
      this.appBuildNumber = setterArg;
    }

    private @Nullable Map<String, String> appEnvironment;

    public @Nullable Map<String, String> getAppEnvironment() {
      return appEnvironment;
    }

    public void setAppEnvironment(@Nullable Map<String, String> setterArg) {
      this.appEnvironment = setterArg;
    }

    private @Nullable Boolean appOpenTrackingEnabled;

    public @Nullable Boolean getAppOpenTrackingEnabled() {
      return appOpenTrackingEnabled;
    }

    public void setAppOpenTrackingEnabled(@Nullable Boolean setterArg) {
      this.appOpenTrackingEnabled = setterArg;
    }

    private @Nullable String appVersion;

    public @Nullable String getAppVersion() {
      return appVersion;
    }

    public void setAppVersion(@Nullable String setterArg) {
      this.appVersion = setterArg;
    }

    private @Nullable Boolean crashReporting;

    public @Nullable Boolean getCrashReporting() {
      return crashReporting;
    }

    public void setCrashReporting(@Nullable Boolean setterArg) {
      this.crashReporting = setterArg;
    }

    private @Nullable List<String> customHosts;

    public @Nullable List<String> getCustomHosts() {
      return customHosts;
    }

    public void setCustomHosts(@Nullable List<String> setterArg) {
      this.customHosts = setterArg;
    }

    private @Nullable Boolean dataSendingEnabled;

    public @Nullable Boolean getDataSendingEnabled() {
      return dataSendingEnabled;
    }

    public void setDataSendingEnabled(@Nullable Boolean setterArg) {
      this.dataSendingEnabled = setterArg;
    }

    private @Nullable String deviceType;

    public @Nullable String getDeviceType() {
      return deviceType;
    }

    public void setDeviceType(@Nullable String setterArg) {
      this.deviceType = setterArg;
    }

    private @Nullable Long dispatchPeriodSeconds;

    public @Nullable Long getDispatchPeriodSeconds() {
      return dispatchPeriodSeconds;
    }

    public void setDispatchPeriodSeconds(@Nullable Long setterArg) {
      this.dispatchPeriodSeconds = setterArg;
    }

    private @Nullable Map<String, String> errorEnvironment;

    public @Nullable Map<String, String> getErrorEnvironment() {
      return errorEnvironment;
    }

    public void setErrorEnvironment(@Nullable Map<String, String> setterArg) {
      this.errorEnvironment = setterArg;
    }

    private @Nullable Boolean firstActivationAsUpdate;

    public @Nullable Boolean getFirstActivationAsUpdate() {
      return firstActivationAsUpdate;
    }

    public void setFirstActivationAsUpdate(@Nullable Boolean setterArg) {
      this.firstActivationAsUpdate = setterArg;
    }

    private @Nullable LocationPigeon location;

    public @Nullable LocationPigeon getLocation() {
      return location;
    }

    public void setLocation(@Nullable LocationPigeon setterArg) {
      this.location = setterArg;
    }

    private @Nullable Boolean locationTracking;

    public @Nullable Boolean getLocationTracking() {
      return locationTracking;
    }

    public void setLocationTracking(@Nullable Boolean setterArg) {
      this.locationTracking = setterArg;
    }

    private @Nullable Boolean logs;

    public @Nullable Boolean getLogs() {
      return logs;
    }

    public void setLogs(@Nullable Boolean setterArg) {
      this.logs = setterArg;
    }

    private @Nullable Long maxReportsCount;

    public @Nullable Long getMaxReportsCount() {
      return maxReportsCount;
    }

    public void setMaxReportsCount(@Nullable Long setterArg) {
      this.maxReportsCount = setterArg;
    }

    private @Nullable Long maxReportsInDatabaseCount;

    public @Nullable Long getMaxReportsInDatabaseCount() {
      return maxReportsInDatabaseCount;
    }

    public void setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
      this.maxReportsInDatabaseCount = setterArg;
    }

    private @Nullable Boolean nativeCrashReporting;

    public @Nullable Boolean getNativeCrashReporting() {
      return nativeCrashReporting;
    }

    public void setNativeCrashReporting(@Nullable Boolean setterArg) {
      this.nativeCrashReporting = setterArg;
    }

    private @Nullable PreloadInfoPigeon preloadInfo;

    public @Nullable PreloadInfoPigeon getPreloadInfo() {
      return preloadInfo;
    }

    public void setPreloadInfo(@Nullable PreloadInfoPigeon setterArg) {
      this.preloadInfo = setterArg;
    }

    private @Nullable Boolean revenueAutoTrackingEnabled;

    public @Nullable Boolean getRevenueAutoTrackingEnabled() {
      return revenueAutoTrackingEnabled;
    }

    public void setRevenueAutoTrackingEnabled(@Nullable Boolean setterArg) {
      this.revenueAutoTrackingEnabled = setterArg;
    }

    private @Nullable Long sessionTimeout;

    public @Nullable Long getSessionTimeout() {
      return sessionTimeout;
    }

    public void setSessionTimeout(@Nullable Long setterArg) {
      this.sessionTimeout = setterArg;
    }

    private @Nullable Boolean sessionsAutoTrackingEnabled;

    public @Nullable Boolean getSessionsAutoTrackingEnabled() {
      return sessionsAutoTrackingEnabled;
    }

    public void setSessionsAutoTrackingEnabled(@Nullable Boolean setterArg) {
      this.sessionsAutoTrackingEnabled = setterArg;
    }

    private @Nullable String userProfileID;

    public @Nullable String getUserProfileID() {
      return userProfileID;
    }

    public void setUserProfileID(@Nullable String setterArg) {
      this.userProfileID = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AppMetricaConfigPigeon() {}

    public static final class Builder {

      private @Nullable String apiKey;

      public @NonNull Builder setApiKey(@NonNull String setterArg) {
        this.apiKey = setterArg;
        return this;
      }

      private @Nullable Boolean advIdentifiersTracking;

      public @NonNull Builder setAdvIdentifiersTracking(@Nullable Boolean setterArg) {
        this.advIdentifiersTracking = setterArg;
        return this;
      }

      private @Nullable Boolean anrMonitoring;

      public @NonNull Builder setAnrMonitoring(@Nullable Boolean setterArg) {
        this.anrMonitoring = setterArg;
        return this;
      }

      private @Nullable Long anrMonitoringTimeout;

      public @NonNull Builder setAnrMonitoringTimeout(@Nullable Long setterArg) {
        this.anrMonitoringTimeout = setterArg;
        return this;
      }

      private @Nullable Long appBuildNumber;

      public @NonNull Builder setAppBuildNumber(@Nullable Long setterArg) {
        this.appBuildNumber = setterArg;
        return this;
      }

      private @Nullable Map<String, String> appEnvironment;

      public @NonNull Builder setAppEnvironment(@Nullable Map<String, String> setterArg) {
        this.appEnvironment = setterArg;
        return this;
      }

      private @Nullable Boolean appOpenTrackingEnabled;

      public @NonNull Builder setAppOpenTrackingEnabled(@Nullable Boolean setterArg) {
        this.appOpenTrackingEnabled = setterArg;
        return this;
      }

      private @Nullable String appVersion;

      public @NonNull Builder setAppVersion(@Nullable String setterArg) {
        this.appVersion = setterArg;
        return this;
      }

      private @Nullable Boolean crashReporting;

      public @NonNull Builder setCrashReporting(@Nullable Boolean setterArg) {
        this.crashReporting = setterArg;
        return this;
      }

      private @Nullable List<String> customHosts;

      public @NonNull Builder setCustomHosts(@Nullable List<String> setterArg) {
        this.customHosts = setterArg;
        return this;
      }

      private @Nullable Boolean dataSendingEnabled;

      public @NonNull Builder setDataSendingEnabled(@Nullable Boolean setterArg) {
        this.dataSendingEnabled = setterArg;
        return this;
      }

      private @Nullable String deviceType;

      public @NonNull Builder setDeviceType(@Nullable String setterArg) {
        this.deviceType = setterArg;
        return this;
      }

      private @Nullable Long dispatchPeriodSeconds;

      public @NonNull Builder setDispatchPeriodSeconds(@Nullable Long setterArg) {
        this.dispatchPeriodSeconds = setterArg;
        return this;
      }

      private @Nullable Map<String, String> errorEnvironment;

      public @NonNull Builder setErrorEnvironment(@Nullable Map<String, String> setterArg) {
        this.errorEnvironment = setterArg;
        return this;
      }

      private @Nullable Boolean firstActivationAsUpdate;

      public @NonNull Builder setFirstActivationAsUpdate(@Nullable Boolean setterArg) {
        this.firstActivationAsUpdate = setterArg;
        return this;
      }

      private @Nullable LocationPigeon location;

      public @NonNull Builder setLocation(@Nullable LocationPigeon setterArg) {
        this.location = setterArg;
        return this;
      }

      private @Nullable Boolean locationTracking;

      public @NonNull Builder setLocationTracking(@Nullable Boolean setterArg) {
        this.locationTracking = setterArg;
        return this;
      }

      private @Nullable Boolean logs;

      public @NonNull Builder setLogs(@Nullable Boolean setterArg) {
        this.logs = setterArg;
        return this;
      }

      private @Nullable Long maxReportsCount;

      public @NonNull Builder setMaxReportsCount(@Nullable Long setterArg) {
        this.maxReportsCount = setterArg;
        return this;
      }

      private @Nullable Long maxReportsInDatabaseCount;

      public @NonNull Builder setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
        this.maxReportsInDatabaseCount = setterArg;
        return this;
      }

      private @Nullable Boolean nativeCrashReporting;

      public @NonNull Builder setNativeCrashReporting(@Nullable Boolean setterArg) {
        this.nativeCrashReporting = setterArg;
        return this;
      }

      private @Nullable PreloadInfoPigeon preloadInfo;

      public @NonNull Builder setPreloadInfo(@Nullable PreloadInfoPigeon setterArg) {
        this.preloadInfo = setterArg;
        return this;
      }

      private @Nullable Boolean revenueAutoTrackingEnabled;

      public @NonNull Builder setRevenueAutoTrackingEnabled(@Nullable Boolean setterArg) {
        this.revenueAutoTrackingEnabled = setterArg;
        return this;
      }

      private @Nullable Long sessionTimeout;

      public @NonNull Builder setSessionTimeout(@Nullable Long setterArg) {
        this.sessionTimeout = setterArg;
        return this;
      }

      private @Nullable Boolean sessionsAutoTrackingEnabled;

      public @NonNull Builder setSessionsAutoTrackingEnabled(@Nullable Boolean setterArg) {
        this.sessionsAutoTrackingEnabled = setterArg;
        return this;
      }

      private @Nullable String userProfileID;

      public @NonNull Builder setUserProfileID(@Nullable String setterArg) {
        this.userProfileID = setterArg;
        return this;
      }

      public @NonNull AppMetricaConfigPigeon build() {
        AppMetricaConfigPigeon pigeonReturn = new AppMetricaConfigPigeon();
        pigeonReturn.setApiKey(apiKey);
        pigeonReturn.setAdvIdentifiersTracking(advIdentifiersTracking);
        pigeonReturn.setAnrMonitoring(anrMonitoring);
        pigeonReturn.setAnrMonitoringTimeout(anrMonitoringTimeout);
        pigeonReturn.setAppBuildNumber(appBuildNumber);
        pigeonReturn.setAppEnvironment(appEnvironment);
        pigeonReturn.setAppOpenTrackingEnabled(appOpenTrackingEnabled);
        pigeonReturn.setAppVersion(appVersion);
        pigeonReturn.setCrashReporting(crashReporting);
        pigeonReturn.setCustomHosts(customHosts);
        pigeonReturn.setDataSendingEnabled(dataSendingEnabled);
        pigeonReturn.setDeviceType(deviceType);
        pigeonReturn.setDispatchPeriodSeconds(dispatchPeriodSeconds);
        pigeonReturn.setErrorEnvironment(errorEnvironment);
        pigeonReturn.setFirstActivationAsUpdate(firstActivationAsUpdate);
        pigeonReturn.setLocation(location);
        pigeonReturn.setLocationTracking(locationTracking);
        pigeonReturn.setLogs(logs);
        pigeonReturn.setMaxReportsCount(maxReportsCount);
        pigeonReturn.setMaxReportsInDatabaseCount(maxReportsInDatabaseCount);
        pigeonReturn.setNativeCrashReporting(nativeCrashReporting);
        pigeonReturn.setPreloadInfo(preloadInfo);
        pigeonReturn.setRevenueAutoTrackingEnabled(revenueAutoTrackingEnabled);
        pigeonReturn.setSessionTimeout(sessionTimeout);
        pigeonReturn.setSessionsAutoTrackingEnabled(sessionsAutoTrackingEnabled);
        pigeonReturn.setUserProfileID(userProfileID);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(26);
      toListResult.add(apiKey);
      toListResult.add(advIdentifiersTracking);
      toListResult.add(anrMonitoring);
      toListResult.add(anrMonitoringTimeout);
      toListResult.add(appBuildNumber);
      toListResult.add(appEnvironment);
      toListResult.add(appOpenTrackingEnabled);
      toListResult.add(appVersion);
      toListResult.add(crashReporting);
      toListResult.add(customHosts);
      toListResult.add(dataSendingEnabled);
      toListResult.add(deviceType);
      toListResult.add(dispatchPeriodSeconds);
      toListResult.add(errorEnvironment);
      toListResult.add(firstActivationAsUpdate);
      toListResult.add((location == null) ? null : location.toList());
      toListResult.add(locationTracking);
      toListResult.add(logs);
      toListResult.add(maxReportsCount);
      toListResult.add(maxReportsInDatabaseCount);
      toListResult.add(nativeCrashReporting);
      toListResult.add((preloadInfo == null) ? null : preloadInfo.toList());
      toListResult.add(revenueAutoTrackingEnabled);
      toListResult.add(sessionTimeout);
      toListResult.add(sessionsAutoTrackingEnabled);
      toListResult.add(userProfileID);
      return toListResult;
    }

    static @NonNull AppMetricaConfigPigeon fromList(@NonNull ArrayList<Object> list) {
      AppMetricaConfigPigeon pigeonResult = new AppMetricaConfigPigeon();
      Object apiKey = list.get(0);
      pigeonResult.setApiKey((String) apiKey);
      Object advIdentifiersTracking = list.get(1);
      pigeonResult.setAdvIdentifiersTracking((Boolean) advIdentifiersTracking);
      Object anrMonitoring = list.get(2);
      pigeonResult.setAnrMonitoring((Boolean) anrMonitoring);
      Object anrMonitoringTimeout = list.get(3);
      pigeonResult.setAnrMonitoringTimeout((anrMonitoringTimeout == null) ? null : ((anrMonitoringTimeout instanceof Integer) ? (Integer) anrMonitoringTimeout : (Long) anrMonitoringTimeout));
      Object appBuildNumber = list.get(4);
      pigeonResult.setAppBuildNumber((appBuildNumber == null) ? null : ((appBuildNumber instanceof Integer) ? (Integer) appBuildNumber : (Long) appBuildNumber));
      Object appEnvironment = list.get(5);
      pigeonResult.setAppEnvironment((Map<String, String>) appEnvironment);
      Object appOpenTrackingEnabled = list.get(6);
      pigeonResult.setAppOpenTrackingEnabled((Boolean) appOpenTrackingEnabled);
      Object appVersion = list.get(7);
      pigeonResult.setAppVersion((String) appVersion);
      Object crashReporting = list.get(8);
      pigeonResult.setCrashReporting((Boolean) crashReporting);
      Object customHosts = list.get(9);
      pigeonResult.setCustomHosts((List<String>) customHosts);
      Object dataSendingEnabled = list.get(10);
      pigeonResult.setDataSendingEnabled((Boolean) dataSendingEnabled);
      Object deviceType = list.get(11);
      pigeonResult.setDeviceType((String) deviceType);
      Object dispatchPeriodSeconds = list.get(12);
      pigeonResult.setDispatchPeriodSeconds((dispatchPeriodSeconds == null) ? null : ((dispatchPeriodSeconds instanceof Integer) ? (Integer) dispatchPeriodSeconds : (Long) dispatchPeriodSeconds));
      Object errorEnvironment = list.get(13);
      pigeonResult.setErrorEnvironment((Map<String, String>) errorEnvironment);
      Object firstActivationAsUpdate = list.get(14);
      pigeonResult.setFirstActivationAsUpdate((Boolean) firstActivationAsUpdate);
      Object location = list.get(15);
      pigeonResult.setLocation((location == null) ? null : LocationPigeon.fromList((ArrayList<Object>) location));
      Object locationTracking = list.get(16);
      pigeonResult.setLocationTracking((Boolean) locationTracking);
      Object logs = list.get(17);
      pigeonResult.setLogs((Boolean) logs);
      Object maxReportsCount = list.get(18);
      pigeonResult.setMaxReportsCount((maxReportsCount == null) ? null : ((maxReportsCount instanceof Integer) ? (Integer) maxReportsCount : (Long) maxReportsCount));
      Object maxReportsInDatabaseCount = list.get(19);
      pigeonResult.setMaxReportsInDatabaseCount((maxReportsInDatabaseCount == null) ? null : ((maxReportsInDatabaseCount instanceof Integer) ? (Integer) maxReportsInDatabaseCount : (Long) maxReportsInDatabaseCount));
      Object nativeCrashReporting = list.get(20);
      pigeonResult.setNativeCrashReporting((Boolean) nativeCrashReporting);
      Object preloadInfo = list.get(21);
      pigeonResult.setPreloadInfo((preloadInfo == null) ? null : PreloadInfoPigeon.fromList((ArrayList<Object>) preloadInfo));
      Object revenueAutoTrackingEnabled = list.get(22);
      pigeonResult.setRevenueAutoTrackingEnabled((Boolean) revenueAutoTrackingEnabled);
      Object sessionTimeout = list.get(23);
      pigeonResult.setSessionTimeout((sessionTimeout == null) ? null : ((sessionTimeout instanceof Integer) ? (Integer) sessionTimeout : (Long) sessionTimeout));
      Object sessionsAutoTrackingEnabled = list.get(24);
      pigeonResult.setSessionsAutoTrackingEnabled((Boolean) sessionsAutoTrackingEnabled);
      Object userProfileID = list.get(25);
      pigeonResult.setUserProfileID((String) userProfileID);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class LocationPigeon {
    private @NonNull Double latitude;

    public @NonNull Double getLatitude() {
      return latitude;
    }

    public void setLatitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"latitude\" is null.");
      }
      this.latitude = setterArg;
    }

    private @NonNull Double longitude;

    public @NonNull Double getLongitude() {
      return longitude;
    }

    public void setLongitude(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"longitude\" is null.");
      }
      this.longitude = setterArg;
    }

    private @Nullable String provider;

    public @Nullable String getProvider() {
      return provider;
    }

    public void setProvider(@Nullable String setterArg) {
      this.provider = setterArg;
    }

    private @Nullable Double altitude;

    public @Nullable Double getAltitude() {
      return altitude;
    }

    public void setAltitude(@Nullable Double setterArg) {
      this.altitude = setterArg;
    }

    private @Nullable Double accuracy;

    public @Nullable Double getAccuracy() {
      return accuracy;
    }

    public void setAccuracy(@Nullable Double setterArg) {
      this.accuracy = setterArg;
    }

    private @Nullable Double course;

    public @Nullable Double getCourse() {
      return course;
    }

    public void setCourse(@Nullable Double setterArg) {
      this.course = setterArg;
    }

    private @Nullable Double speed;

    public @Nullable Double getSpeed() {
      return speed;
    }

    public void setSpeed(@Nullable Double setterArg) {
      this.speed = setterArg;
    }

    private @Nullable Long timestamp;

    public @Nullable Long getTimestamp() {
      return timestamp;
    }

    public void setTimestamp(@Nullable Long setterArg) {
      this.timestamp = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    LocationPigeon() {}

    public static final class Builder {

      private @Nullable Double latitude;

      public @NonNull Builder setLatitude(@NonNull Double setterArg) {
        this.latitude = setterArg;
        return this;
      }

      private @Nullable Double longitude;

      public @NonNull Builder setLongitude(@NonNull Double setterArg) {
        this.longitude = setterArg;
        return this;
      }

      private @Nullable String provider;

      public @NonNull Builder setProvider(@Nullable String setterArg) {
        this.provider = setterArg;
        return this;
      }

      private @Nullable Double altitude;

      public @NonNull Builder setAltitude(@Nullable Double setterArg) {
        this.altitude = setterArg;
        return this;
      }

      private @Nullable Double accuracy;

      public @NonNull Builder setAccuracy(@Nullable Double setterArg) {
        this.accuracy = setterArg;
        return this;
      }

      private @Nullable Double course;

      public @NonNull Builder setCourse(@Nullable Double setterArg) {
        this.course = setterArg;
        return this;
      }

      private @Nullable Double speed;

      public @NonNull Builder setSpeed(@Nullable Double setterArg) {
        this.speed = setterArg;
        return this;
      }

      private @Nullable Long timestamp;

      public @NonNull Builder setTimestamp(@Nullable Long setterArg) {
        this.timestamp = setterArg;
        return this;
      }

      public @NonNull LocationPigeon build() {
        LocationPigeon pigeonReturn = new LocationPigeon();
        pigeonReturn.setLatitude(latitude);
        pigeonReturn.setLongitude(longitude);
        pigeonReturn.setProvider(provider);
        pigeonReturn.setAltitude(altitude);
        pigeonReturn.setAccuracy(accuracy);
        pigeonReturn.setCourse(course);
        pigeonReturn.setSpeed(speed);
        pigeonReturn.setTimestamp(timestamp);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add(latitude);
      toListResult.add(longitude);
      toListResult.add(provider);
      toListResult.add(altitude);
      toListResult.add(accuracy);
      toListResult.add(course);
      toListResult.add(speed);
      toListResult.add(timestamp);
      return toListResult;
    }

    static @NonNull LocationPigeon fromList(@NonNull ArrayList<Object> list) {
      LocationPigeon pigeonResult = new LocationPigeon();
      Object latitude = list.get(0);
      pigeonResult.setLatitude((Double) latitude);
      Object longitude = list.get(1);
      pigeonResult.setLongitude((Double) longitude);
      Object provider = list.get(2);
      pigeonResult.setProvider((String) provider);
      Object altitude = list.get(3);
      pigeonResult.setAltitude((Double) altitude);
      Object accuracy = list.get(4);
      pigeonResult.setAccuracy((Double) accuracy);
      Object course = list.get(5);
      pigeonResult.setCourse((Double) course);
      Object speed = list.get(6);
      pigeonResult.setSpeed((Double) speed);
      Object timestamp = list.get(7);
      pigeonResult.setTimestamp((timestamp == null) ? null : ((timestamp instanceof Integer) ? (Integer) timestamp : (Long) timestamp));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PreloadInfoPigeon {
    private @NonNull String trackingId;

    public @NonNull String getTrackingId() {
      return trackingId;
    }

    public void setTrackingId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"trackingId\" is null.");
      }
      this.trackingId = setterArg;
    }

    private @Nullable Map<String, String> additionalInfo;

    public @Nullable Map<String, String> getAdditionalInfo() {
      return additionalInfo;
    }

    public void setAdditionalInfo(@Nullable Map<String, String> setterArg) {
      this.additionalInfo = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PreloadInfoPigeon() {}

    public static final class Builder {

      private @Nullable String trackingId;

      public @NonNull Builder setTrackingId(@NonNull String setterArg) {
        this.trackingId = setterArg;
        return this;
      }

      private @Nullable Map<String, String> additionalInfo;

      public @NonNull Builder setAdditionalInfo(@Nullable Map<String, String> setterArg) {
        this.additionalInfo = setterArg;
        return this;
      }

      public @NonNull PreloadInfoPigeon build() {
        PreloadInfoPigeon pigeonReturn = new PreloadInfoPigeon();
        pigeonReturn.setTrackingId(trackingId);
        pigeonReturn.setAdditionalInfo(additionalInfo);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(trackingId);
      toListResult.add(additionalInfo);
      return toListResult;
    }

    static @NonNull PreloadInfoPigeon fromList(@NonNull ArrayList<Object> list) {
      PreloadInfoPigeon pigeonResult = new PreloadInfoPigeon();
      Object trackingId = list.get(0);
      pigeonResult.setTrackingId((String) trackingId);
      Object additionalInfo = list.get(1);
      pigeonResult.setAdditionalInfo((Map<String, String>) additionalInfo);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppMetricaDeferredDeeplinkErrorPigeon {
    private @NonNull AppMetricaDeferredDeeplinkReasonPigeon reason;

    public @NonNull AppMetricaDeferredDeeplinkReasonPigeon getReason() {
      return reason;
    }

    public void setReason(@NonNull AppMetricaDeferredDeeplinkReasonPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"reason\" is null.");
      }
      this.reason = setterArg;
    }

    private @NonNull String description;

    public @NonNull String getDescription() {
      return description;
    }

    public void setDescription(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"description\" is null.");
      }
      this.description = setterArg;
    }

    private @Nullable String message;

    public @Nullable String getMessage() {
      return message;
    }

    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AppMetricaDeferredDeeplinkErrorPigeon() {}

    public static final class Builder {

      private @Nullable AppMetricaDeferredDeeplinkReasonPigeon reason;

      public @NonNull Builder setReason(@NonNull AppMetricaDeferredDeeplinkReasonPigeon setterArg) {
        this.reason = setterArg;
        return this;
      }

      private @Nullable String description;

      public @NonNull Builder setDescription(@NonNull String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String message;

      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }

      public @NonNull AppMetricaDeferredDeeplinkErrorPigeon build() {
        AppMetricaDeferredDeeplinkErrorPigeon pigeonReturn = new AppMetricaDeferredDeeplinkErrorPigeon();
        pigeonReturn.setReason(reason);
        pigeonReturn.setDescription(description);
        pigeonReturn.setMessage(message);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(reason == null ? null : reason.index);
      toListResult.add(description);
      toListResult.add(message);
      return toListResult;
    }

    static @NonNull AppMetricaDeferredDeeplinkErrorPigeon fromList(@NonNull ArrayList<Object> list) {
      AppMetricaDeferredDeeplinkErrorPigeon pigeonResult = new AppMetricaDeferredDeeplinkErrorPigeon();
      Object reason = list.get(0);
      pigeonResult.setReason(reason == null ? null : AppMetricaDeferredDeeplinkReasonPigeon.values()[(int) reason]);
      Object description = list.get(1);
      pigeonResult.setDescription((String) description);
      Object message = list.get(2);
      pigeonResult.setMessage((String) message);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppMetricaDeferredDeeplinkPigeon {
    private @Nullable String deeplink;

    public @Nullable String getDeeplink() {
      return deeplink;
    }

    public void setDeeplink(@Nullable String setterArg) {
      this.deeplink = setterArg;
    }

    private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;

    public @Nullable AppMetricaDeferredDeeplinkErrorPigeon getError() {
      return error;
    }

    public void setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {

      private @Nullable String deeplink;

      public @NonNull Builder setDeeplink(@Nullable String setterArg) {
        this.deeplink = setterArg;
        return this;
      }

      private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;

      public @NonNull Builder setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
        this.error = setterArg;
        return this;
      }

      public @NonNull AppMetricaDeferredDeeplinkPigeon build() {
        AppMetricaDeferredDeeplinkPigeon pigeonReturn = new AppMetricaDeferredDeeplinkPigeon();
        pigeonReturn.setDeeplink(deeplink);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(deeplink);
      toListResult.add((error == null) ? null : error.toList());
      return toListResult;
    }

    static @NonNull AppMetricaDeferredDeeplinkPigeon fromList(@NonNull ArrayList<Object> list) {
      AppMetricaDeferredDeeplinkPigeon pigeonResult = new AppMetricaDeferredDeeplinkPigeon();
      Object deeplink = list.get(0);
      pigeonResult.setDeeplink((String) deeplink);
      Object error = list.get(1);
      pigeonResult.setError((error == null) ? null : AppMetricaDeferredDeeplinkErrorPigeon.fromList((ArrayList<Object>) error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AppMetricaDeferredDeeplinkParametersPigeon {
    private @Nullable Map<String, String> parameters;

    public @Nullable Map<String, String> getParameters() {
      return parameters;
    }

    public void setParameters(@Nullable Map<String, String> setterArg) {
      this.parameters = setterArg;
    }

    private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;

    public @Nullable AppMetricaDeferredDeeplinkErrorPigeon getError() {
      return error;
    }

    public void setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
      this.error = setterArg;
    }

    public static final class Builder {

      private @Nullable Map<String, String> parameters;

      public @NonNull Builder setParameters(@Nullable Map<String, String> setterArg) {
        this.parameters = setterArg;
        return this;
      }

      private @Nullable AppMetricaDeferredDeeplinkErrorPigeon error;

      public @NonNull Builder setError(@Nullable AppMetricaDeferredDeeplinkErrorPigeon setterArg) {
        this.error = setterArg;
        return this;
      }

      public @NonNull AppMetricaDeferredDeeplinkParametersPigeon build() {
        AppMetricaDeferredDeeplinkParametersPigeon pigeonReturn = new AppMetricaDeferredDeeplinkParametersPigeon();
        pigeonReturn.setParameters(parameters);
        pigeonReturn.setError(error);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(parameters);
      toListResult.add((error == null) ? null : error.toList());
      return toListResult;
    }

    static @NonNull AppMetricaDeferredDeeplinkParametersPigeon fromList(@NonNull ArrayList<Object> list) {
      AppMetricaDeferredDeeplinkParametersPigeon pigeonResult = new AppMetricaDeferredDeeplinkParametersPigeon();
      Object parameters = list.get(0);
      pigeonResult.setParameters((Map<String, String>) parameters);
      Object error = list.get(1);
      pigeonResult.setError((error == null) ? null : AppMetricaDeferredDeeplinkErrorPigeon.fromList((ArrayList<Object>) error));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class RevenuePigeon {
    private @NonNull String price;

    public @NonNull String getPrice() {
      return price;
    }

    public void setPrice(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"price\" is null.");
      }
      this.price = setterArg;
    }

    private @NonNull String currency;

    public @NonNull String getCurrency() {
      return currency;
    }

    public void setCurrency(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currency\" is null.");
      }
      this.currency = setterArg;
    }

    private @Nullable Long quantity;

    public @Nullable Long getQuantity() {
      return quantity;
    }

    public void setQuantity(@Nullable Long setterArg) {
      this.quantity = setterArg;
    }

    private @Nullable String productId;

    public @Nullable String getProductId() {
      return productId;
    }

    public void setProductId(@Nullable String setterArg) {
      this.productId = setterArg;
    }

    private @Nullable String payload;

    public @Nullable String getPayload() {
      return payload;
    }

    public void setPayload(@Nullable String setterArg) {
      this.payload = setterArg;
    }

    private @Nullable ReceiptPigeon receipt;

    public @Nullable ReceiptPigeon getReceipt() {
      return receipt;
    }

    public void setReceipt(@Nullable ReceiptPigeon setterArg) {
      this.receipt = setterArg;
    }

    private @Nullable String transactionId;

    public @Nullable String getTransactionId() {
      return transactionId;
    }

    public void setTransactionId(@Nullable String setterArg) {
      this.transactionId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    RevenuePigeon() {}

    public static final class Builder {

      private @Nullable String price;

      public @NonNull Builder setPrice(@NonNull String setterArg) {
        this.price = setterArg;
        return this;
      }

      private @Nullable String currency;

      public @NonNull Builder setCurrency(@NonNull String setterArg) {
        this.currency = setterArg;
        return this;
      }

      private @Nullable Long quantity;

      public @NonNull Builder setQuantity(@Nullable Long setterArg) {
        this.quantity = setterArg;
        return this;
      }

      private @Nullable String productId;

      public @NonNull Builder setProductId(@Nullable String setterArg) {
        this.productId = setterArg;
        return this;
      }

      private @Nullable String payload;

      public @NonNull Builder setPayload(@Nullable String setterArg) {
        this.payload = setterArg;
        return this;
      }

      private @Nullable ReceiptPigeon receipt;

      public @NonNull Builder setReceipt(@Nullable ReceiptPigeon setterArg) {
        this.receipt = setterArg;
        return this;
      }

      private @Nullable String transactionId;

      public @NonNull Builder setTransactionId(@Nullable String setterArg) {
        this.transactionId = setterArg;
        return this;
      }

      public @NonNull RevenuePigeon build() {
        RevenuePigeon pigeonReturn = new RevenuePigeon();
        pigeonReturn.setPrice(price);
        pigeonReturn.setCurrency(currency);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setProductId(productId);
        pigeonReturn.setPayload(payload);
        pigeonReturn.setReceipt(receipt);
        pigeonReturn.setTransactionId(transactionId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(price);
      toListResult.add(currency);
      toListResult.add(quantity);
      toListResult.add(productId);
      toListResult.add(payload);
      toListResult.add((receipt == null) ? null : receipt.toList());
      toListResult.add(transactionId);
      return toListResult;
    }

    static @NonNull RevenuePigeon fromList(@NonNull ArrayList<Object> list) {
      RevenuePigeon pigeonResult = new RevenuePigeon();
      Object price = list.get(0);
      pigeonResult.setPrice((String) price);
      Object currency = list.get(1);
      pigeonResult.setCurrency((String) currency);
      Object quantity = list.get(2);
      pigeonResult.setQuantity((quantity == null) ? null : ((quantity instanceof Integer) ? (Integer) quantity : (Long) quantity));
      Object productId = list.get(3);
      pigeonResult.setProductId((String) productId);
      Object payload = list.get(4);
      pigeonResult.setPayload((String) payload);
      Object receipt = list.get(5);
      pigeonResult.setReceipt((receipt == null) ? null : ReceiptPigeon.fromList((ArrayList<Object>) receipt));
      Object transactionId = list.get(6);
      pigeonResult.setTransactionId((String) transactionId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReceiptPigeon {
    private @Nullable String data;

    public @Nullable String getData() {
      return data;
    }

    public void setData(@Nullable String setterArg) {
      this.data = setterArg;
    }

    private @Nullable String signature;

    public @Nullable String getSignature() {
      return signature;
    }

    public void setSignature(@Nullable String setterArg) {
      this.signature = setterArg;
    }

    public static final class Builder {

      private @Nullable String data;

      public @NonNull Builder setData(@Nullable String setterArg) {
        this.data = setterArg;
        return this;
      }

      private @Nullable String signature;

      public @NonNull Builder setSignature(@Nullable String setterArg) {
        this.signature = setterArg;
        return this;
      }

      public @NonNull ReceiptPigeon build() {
        ReceiptPigeon pigeonReturn = new ReceiptPigeon();
        pigeonReturn.setData(data);
        pigeonReturn.setSignature(signature);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(data);
      toListResult.add(signature);
      return toListResult;
    }

    static @NonNull ReceiptPigeon fromList(@NonNull ArrayList<Object> list) {
      ReceiptPigeon pigeonResult = new ReceiptPigeon();
      Object data = list.get(0);
      pigeonResult.setData((String) data);
      Object signature = list.get(1);
      pigeonResult.setSignature((String) signature);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceAmountPigeon {
    private @NonNull String amount;

    public @NonNull String getAmount() {
      return amount;
    }

    public void setAmount(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"amount\" is null.");
      }
      this.amount = setterArg;
    }

    private @NonNull String currency;

    public @NonNull String getCurrency() {
      return currency;
    }

    public void setCurrency(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currency\" is null.");
      }
      this.currency = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ECommerceAmountPigeon() {}

    public static final class Builder {

      private @Nullable String amount;

      public @NonNull Builder setAmount(@NonNull String setterArg) {
        this.amount = setterArg;
        return this;
      }

      private @Nullable String currency;

      public @NonNull Builder setCurrency(@NonNull String setterArg) {
        this.currency = setterArg;
        return this;
      }

      public @NonNull ECommerceAmountPigeon build() {
        ECommerceAmountPigeon pigeonReturn = new ECommerceAmountPigeon();
        pigeonReturn.setAmount(amount);
        pigeonReturn.setCurrency(currency);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(amount);
      toListResult.add(currency);
      return toListResult;
    }

    static @NonNull ECommerceAmountPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceAmountPigeon pigeonResult = new ECommerceAmountPigeon();
      Object amount = list.get(0);
      pigeonResult.setAmount((String) amount);
      Object currency = list.get(1);
      pigeonResult.setCurrency((String) currency);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceProductPigeon {
    private @NonNull String sku;

    public @NonNull String getSku() {
      return sku;
    }

    public void setSku(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sku\" is null.");
      }
      this.sku = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable List<String> categoriesPath;

    public @Nullable List<String> getCategoriesPath() {
      return categoriesPath;
    }

    public void setCategoriesPath(@Nullable List<String> setterArg) {
      this.categoriesPath = setterArg;
    }

    private @Nullable Map<String, String> payload;

    public @Nullable Map<String, String> getPayload() {
      return payload;
    }

    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    private @Nullable ECommercePricePigeon actualPrice;

    public @Nullable ECommercePricePigeon getActualPrice() {
      return actualPrice;
    }

    public void setActualPrice(@Nullable ECommercePricePigeon setterArg) {
      this.actualPrice = setterArg;
    }

    private @Nullable ECommercePricePigeon originalPrice;

    public @Nullable ECommercePricePigeon getOriginalPrice() {
      return originalPrice;
    }

    public void setOriginalPrice(@Nullable ECommercePricePigeon setterArg) {
      this.originalPrice = setterArg;
    }

    private @Nullable List<String> promocodes;

    public @Nullable List<String> getPromocodes() {
      return promocodes;
    }

    public void setPromocodes(@Nullable List<String> setterArg) {
      this.promocodes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ECommerceProductPigeon() {}

    public static final class Builder {

      private @Nullable String sku;

      public @NonNull Builder setSku(@NonNull String setterArg) {
        this.sku = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable List<String> categoriesPath;

      public @NonNull Builder setCategoriesPath(@Nullable List<String> setterArg) {
        this.categoriesPath = setterArg;
        return this;
      }

      private @Nullable Map<String, String> payload;

      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }

      private @Nullable ECommercePricePigeon actualPrice;

      public @NonNull Builder setActualPrice(@Nullable ECommercePricePigeon setterArg) {
        this.actualPrice = setterArg;
        return this;
      }

      private @Nullable ECommercePricePigeon originalPrice;

      public @NonNull Builder setOriginalPrice(@Nullable ECommercePricePigeon setterArg) {
        this.originalPrice = setterArg;
        return this;
      }

      private @Nullable List<String> promocodes;

      public @NonNull Builder setPromocodes(@Nullable List<String> setterArg) {
        this.promocodes = setterArg;
        return this;
      }

      public @NonNull ECommerceProductPigeon build() {
        ECommerceProductPigeon pigeonReturn = new ECommerceProductPigeon();
        pigeonReturn.setSku(sku);
        pigeonReturn.setName(name);
        pigeonReturn.setCategoriesPath(categoriesPath);
        pigeonReturn.setPayload(payload);
        pigeonReturn.setActualPrice(actualPrice);
        pigeonReturn.setOriginalPrice(originalPrice);
        pigeonReturn.setPromocodes(promocodes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(7);
      toListResult.add(sku);
      toListResult.add(name);
      toListResult.add(categoriesPath);
      toListResult.add(payload);
      toListResult.add((actualPrice == null) ? null : actualPrice.toList());
      toListResult.add((originalPrice == null) ? null : originalPrice.toList());
      toListResult.add(promocodes);
      return toListResult;
    }

    static @NonNull ECommerceProductPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceProductPigeon pigeonResult = new ECommerceProductPigeon();
      Object sku = list.get(0);
      pigeonResult.setSku((String) sku);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object categoriesPath = list.get(2);
      pigeonResult.setCategoriesPath((List<String>) categoriesPath);
      Object payload = list.get(3);
      pigeonResult.setPayload((Map<String, String>) payload);
      Object actualPrice = list.get(4);
      pigeonResult.setActualPrice((actualPrice == null) ? null : ECommercePricePigeon.fromList((ArrayList<Object>) actualPrice));
      Object originalPrice = list.get(5);
      pigeonResult.setOriginalPrice((originalPrice == null) ? null : ECommercePricePigeon.fromList((ArrayList<Object>) originalPrice));
      Object promocodes = list.get(6);
      pigeonResult.setPromocodes((List<String>) promocodes);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommercePricePigeon {
    private @NonNull ECommerceAmountPigeon fiat;

    public @NonNull ECommerceAmountPigeon getFiat() {
      return fiat;
    }

    public void setFiat(@NonNull ECommerceAmountPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"fiat\" is null.");
      }
      this.fiat = setterArg;
    }

    private @Nullable List<ECommerceAmountPigeon> internalComponents;

    public @Nullable List<ECommerceAmountPigeon> getInternalComponents() {
      return internalComponents;
    }

    public void setInternalComponents(@Nullable List<ECommerceAmountPigeon> setterArg) {
      this.internalComponents = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ECommercePricePigeon() {}

    public static final class Builder {

      private @Nullable ECommerceAmountPigeon fiat;

      public @NonNull Builder setFiat(@NonNull ECommerceAmountPigeon setterArg) {
        this.fiat = setterArg;
        return this;
      }

      private @Nullable List<ECommerceAmountPigeon> internalComponents;

      public @NonNull Builder setInternalComponents(@Nullable List<ECommerceAmountPigeon> setterArg) {
        this.internalComponents = setterArg;
        return this;
      }

      public @NonNull ECommercePricePigeon build() {
        ECommercePricePigeon pigeonReturn = new ECommercePricePigeon();
        pigeonReturn.setFiat(fiat);
        pigeonReturn.setInternalComponents(internalComponents);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((fiat == null) ? null : fiat.toList());
      toListResult.add(internalComponents);
      return toListResult;
    }

    static @NonNull ECommercePricePigeon fromList(@NonNull ArrayList<Object> list) {
      ECommercePricePigeon pigeonResult = new ECommercePricePigeon();
      Object fiat = list.get(0);
      pigeonResult.setFiat((fiat == null) ? null : ECommerceAmountPigeon.fromList((ArrayList<Object>) fiat));
      Object internalComponents = list.get(1);
      pigeonResult.setInternalComponents((List<ECommerceAmountPigeon>) internalComponents);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceReferrerPigeon {
    private @Nullable String type;

    public @Nullable String getType() {
      return type;
    }

    public void setType(@Nullable String setterArg) {
      this.type = setterArg;
    }

    private @Nullable String identifier;

    public @Nullable String getIdentifier() {
      return identifier;
    }

    public void setIdentifier(@Nullable String setterArg) {
      this.identifier = setterArg;
    }

    private @Nullable ECommerceScreenPigeon screen;

    public @Nullable ECommerceScreenPigeon getScreen() {
      return screen;
    }

    public void setScreen(@Nullable ECommerceScreenPigeon setterArg) {
      this.screen = setterArg;
    }

    public static final class Builder {

      private @Nullable String type;

      public @NonNull Builder setType(@Nullable String setterArg) {
        this.type = setterArg;
        return this;
      }

      private @Nullable String identifier;

      public @NonNull Builder setIdentifier(@Nullable String setterArg) {
        this.identifier = setterArg;
        return this;
      }

      private @Nullable ECommerceScreenPigeon screen;

      public @NonNull Builder setScreen(@Nullable ECommerceScreenPigeon setterArg) {
        this.screen = setterArg;
        return this;
      }

      public @NonNull ECommerceReferrerPigeon build() {
        ECommerceReferrerPigeon pigeonReturn = new ECommerceReferrerPigeon();
        pigeonReturn.setType(type);
        pigeonReturn.setIdentifier(identifier);
        pigeonReturn.setScreen(screen);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(type);
      toListResult.add(identifier);
      toListResult.add((screen == null) ? null : screen.toList());
      return toListResult;
    }

    static @NonNull ECommerceReferrerPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceReferrerPigeon pigeonResult = new ECommerceReferrerPigeon();
      Object type = list.get(0);
      pigeonResult.setType((String) type);
      Object identifier = list.get(1);
      pigeonResult.setIdentifier((String) identifier);
      Object screen = list.get(2);
      pigeonResult.setScreen((screen == null) ? null : ECommerceScreenPigeon.fromList((ArrayList<Object>) screen));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceScreenPigeon {
    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable List<String> categoriesPath;

    public @Nullable List<String> getCategoriesPath() {
      return categoriesPath;
    }

    public void setCategoriesPath(@Nullable List<String> setterArg) {
      this.categoriesPath = setterArg;
    }

    private @Nullable String searchQuery;

    public @Nullable String getSearchQuery() {
      return searchQuery;
    }

    public void setSearchQuery(@Nullable String setterArg) {
      this.searchQuery = setterArg;
    }

    private @Nullable Map<String, String> payload;

    public @Nullable Map<String, String> getPayload() {
      return payload;
    }

    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    public static final class Builder {

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable List<String> categoriesPath;

      public @NonNull Builder setCategoriesPath(@Nullable List<String> setterArg) {
        this.categoriesPath = setterArg;
        return this;
      }

      private @Nullable String searchQuery;

      public @NonNull Builder setSearchQuery(@Nullable String setterArg) {
        this.searchQuery = setterArg;
        return this;
      }

      private @Nullable Map<String, String> payload;

      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }

      public @NonNull ECommerceScreenPigeon build() {
        ECommerceScreenPigeon pigeonReturn = new ECommerceScreenPigeon();
        pigeonReturn.setName(name);
        pigeonReturn.setCategoriesPath(categoriesPath);
        pigeonReturn.setSearchQuery(searchQuery);
        pigeonReturn.setPayload(payload);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(name);
      toListResult.add(categoriesPath);
      toListResult.add(searchQuery);
      toListResult.add(payload);
      return toListResult;
    }

    static @NonNull ECommerceScreenPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceScreenPigeon pigeonResult = new ECommerceScreenPigeon();
      Object name = list.get(0);
      pigeonResult.setName((String) name);
      Object categoriesPath = list.get(1);
      pigeonResult.setCategoriesPath((List<String>) categoriesPath);
      Object searchQuery = list.get(2);
      pigeonResult.setSearchQuery((String) searchQuery);
      Object payload = list.get(3);
      pigeonResult.setPayload((Map<String, String>) payload);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceCartItemPigeon {
    private @NonNull ECommerceProductPigeon product;

    public @NonNull ECommerceProductPigeon getProduct() {
      return product;
    }

    public void setProduct(@NonNull ECommerceProductPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"product\" is null.");
      }
      this.product = setterArg;
    }

    private @NonNull String quantity;

    public @NonNull String getQuantity() {
      return quantity;
    }

    public void setQuantity(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"quantity\" is null.");
      }
      this.quantity = setterArg;
    }

    private @NonNull ECommercePricePigeon revenue;

    public @NonNull ECommercePricePigeon getRevenue() {
      return revenue;
    }

    public void setRevenue(@NonNull ECommercePricePigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"revenue\" is null.");
      }
      this.revenue = setterArg;
    }

    private @Nullable ECommerceReferrerPigeon referrer;

    public @Nullable ECommerceReferrerPigeon getReferrer() {
      return referrer;
    }

    public void setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
      this.referrer = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ECommerceCartItemPigeon() {}

    public static final class Builder {

      private @Nullable ECommerceProductPigeon product;

      public @NonNull Builder setProduct(@NonNull ECommerceProductPigeon setterArg) {
        this.product = setterArg;
        return this;
      }

      private @Nullable String quantity;

      public @NonNull Builder setQuantity(@NonNull String setterArg) {
        this.quantity = setterArg;
        return this;
      }

      private @Nullable ECommercePricePigeon revenue;

      public @NonNull Builder setRevenue(@NonNull ECommercePricePigeon setterArg) {
        this.revenue = setterArg;
        return this;
      }

      private @Nullable ECommerceReferrerPigeon referrer;

      public @NonNull Builder setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
        this.referrer = setterArg;
        return this;
      }

      public @NonNull ECommerceCartItemPigeon build() {
        ECommerceCartItemPigeon pigeonReturn = new ECommerceCartItemPigeon();
        pigeonReturn.setProduct(product);
        pigeonReturn.setQuantity(quantity);
        pigeonReturn.setRevenue(revenue);
        pigeonReturn.setReferrer(referrer);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add((product == null) ? null : product.toList());
      toListResult.add(quantity);
      toListResult.add((revenue == null) ? null : revenue.toList());
      toListResult.add((referrer == null) ? null : referrer.toList());
      return toListResult;
    }

    static @NonNull ECommerceCartItemPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceCartItemPigeon pigeonResult = new ECommerceCartItemPigeon();
      Object product = list.get(0);
      pigeonResult.setProduct((product == null) ? null : ECommerceProductPigeon.fromList((ArrayList<Object>) product));
      Object quantity = list.get(1);
      pigeonResult.setQuantity((String) quantity);
      Object revenue = list.get(2);
      pigeonResult.setRevenue((revenue == null) ? null : ECommercePricePigeon.fromList((ArrayList<Object>) revenue));
      Object referrer = list.get(3);
      pigeonResult.setReferrer((referrer == null) ? null : ECommerceReferrerPigeon.fromList((ArrayList<Object>) referrer));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceOrderPigeon {
    private @NonNull String identifier;

    public @NonNull String getIdentifier() {
      return identifier;
    }

    public void setIdentifier(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"identifier\" is null.");
      }
      this.identifier = setterArg;
    }

    private @NonNull List<ECommerceCartItemPigeon> items;

    public @NonNull List<ECommerceCartItemPigeon> getItems() {
      return items;
    }

    public void setItems(@NonNull List<ECommerceCartItemPigeon> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"items\" is null.");
      }
      this.items = setterArg;
    }

    private @Nullable Map<String, String> payload;

    public @Nullable Map<String, String> getPayload() {
      return payload;
    }

    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ECommerceOrderPigeon() {}

    public static final class Builder {

      private @Nullable String identifier;

      public @NonNull Builder setIdentifier(@NonNull String setterArg) {
        this.identifier = setterArg;
        return this;
      }

      private @Nullable List<ECommerceCartItemPigeon> items;

      public @NonNull Builder setItems(@NonNull List<ECommerceCartItemPigeon> setterArg) {
        this.items = setterArg;
        return this;
      }

      private @Nullable Map<String, String> payload;

      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }

      public @NonNull ECommerceOrderPigeon build() {
        ECommerceOrderPigeon pigeonReturn = new ECommerceOrderPigeon();
        pigeonReturn.setIdentifier(identifier);
        pigeonReturn.setItems(items);
        pigeonReturn.setPayload(payload);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(identifier);
      toListResult.add(items);
      toListResult.add(payload);
      return toListResult;
    }

    static @NonNull ECommerceOrderPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceOrderPigeon pigeonResult = new ECommerceOrderPigeon();
      Object identifier = list.get(0);
      pigeonResult.setIdentifier((String) identifier);
      Object items = list.get(1);
      pigeonResult.setItems((List<ECommerceCartItemPigeon>) items);
      Object payload = list.get(2);
      pigeonResult.setPayload((Map<String, String>) payload);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ECommerceEventPigeon {
    private @NonNull String eventType;

    public @NonNull String getEventType() {
      return eventType;
    }

    public void setEventType(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"eventType\" is null.");
      }
      this.eventType = setterArg;
    }

    private @Nullable ECommerceCartItemPigeon cartItem;

    public @Nullable ECommerceCartItemPigeon getCartItem() {
      return cartItem;
    }

    public void setCartItem(@Nullable ECommerceCartItemPigeon setterArg) {
      this.cartItem = setterArg;
    }

    private @Nullable ECommerceOrderPigeon order;

    public @Nullable ECommerceOrderPigeon getOrder() {
      return order;
    }

    public void setOrder(@Nullable ECommerceOrderPigeon setterArg) {
      this.order = setterArg;
    }

    private @Nullable ECommerceProductPigeon product;

    public @Nullable ECommerceProductPigeon getProduct() {
      return product;
    }

    public void setProduct(@Nullable ECommerceProductPigeon setterArg) {
      this.product = setterArg;
    }

    private @Nullable ECommerceReferrerPigeon referrer;

    public @Nullable ECommerceReferrerPigeon getReferrer() {
      return referrer;
    }

    public void setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
      this.referrer = setterArg;
    }

    private @Nullable ECommerceScreenPigeon screen;

    public @Nullable ECommerceScreenPigeon getScreen() {
      return screen;
    }

    public void setScreen(@Nullable ECommerceScreenPigeon setterArg) {
      this.screen = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ECommerceEventPigeon() {}

    public static final class Builder {

      private @Nullable String eventType;

      public @NonNull Builder setEventType(@NonNull String setterArg) {
        this.eventType = setterArg;
        return this;
      }

      private @Nullable ECommerceCartItemPigeon cartItem;

      public @NonNull Builder setCartItem(@Nullable ECommerceCartItemPigeon setterArg) {
        this.cartItem = setterArg;
        return this;
      }

      private @Nullable ECommerceOrderPigeon order;

      public @NonNull Builder setOrder(@Nullable ECommerceOrderPigeon setterArg) {
        this.order = setterArg;
        return this;
      }

      private @Nullable ECommerceProductPigeon product;

      public @NonNull Builder setProduct(@Nullable ECommerceProductPigeon setterArg) {
        this.product = setterArg;
        return this;
      }

      private @Nullable ECommerceReferrerPigeon referrer;

      public @NonNull Builder setReferrer(@Nullable ECommerceReferrerPigeon setterArg) {
        this.referrer = setterArg;
        return this;
      }

      private @Nullable ECommerceScreenPigeon screen;

      public @NonNull Builder setScreen(@Nullable ECommerceScreenPigeon setterArg) {
        this.screen = setterArg;
        return this;
      }

      public @NonNull ECommerceEventPigeon build() {
        ECommerceEventPigeon pigeonReturn = new ECommerceEventPigeon();
        pigeonReturn.setEventType(eventType);
        pigeonReturn.setCartItem(cartItem);
        pigeonReturn.setOrder(order);
        pigeonReturn.setProduct(product);
        pigeonReturn.setReferrer(referrer);
        pigeonReturn.setScreen(screen);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(6);
      toListResult.add(eventType);
      toListResult.add((cartItem == null) ? null : cartItem.toList());
      toListResult.add((order == null) ? null : order.toList());
      toListResult.add((product == null) ? null : product.toList());
      toListResult.add((referrer == null) ? null : referrer.toList());
      toListResult.add((screen == null) ? null : screen.toList());
      return toListResult;
    }

    static @NonNull ECommerceEventPigeon fromList(@NonNull ArrayList<Object> list) {
      ECommerceEventPigeon pigeonResult = new ECommerceEventPigeon();
      Object eventType = list.get(0);
      pigeonResult.setEventType((String) eventType);
      Object cartItem = list.get(1);
      pigeonResult.setCartItem((cartItem == null) ? null : ECommerceCartItemPigeon.fromList((ArrayList<Object>) cartItem));
      Object order = list.get(2);
      pigeonResult.setOrder((order == null) ? null : ECommerceOrderPigeon.fromList((ArrayList<Object>) order));
      Object product = list.get(3);
      pigeonResult.setProduct((product == null) ? null : ECommerceProductPigeon.fromList((ArrayList<Object>) product));
      Object referrer = list.get(4);
      pigeonResult.setReferrer((referrer == null) ? null : ECommerceReferrerPigeon.fromList((ArrayList<Object>) referrer));
      Object screen = list.get(5);
      pigeonResult.setScreen((screen == null) ? null : ECommerceScreenPigeon.fromList((ArrayList<Object>) screen));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StackTraceElementPigeon {
    private @NonNull String className;

    public @NonNull String getClassName() {
      return className;
    }

    public void setClassName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"className\" is null.");
      }
      this.className = setterArg;
    }

    private @Nullable String fileName;

    public @Nullable String getFileName() {
      return fileName;
    }

    public void setFileName(@Nullable String setterArg) {
      this.fileName = setterArg;
    }

    private @NonNull Long line;

    public @NonNull Long getLine() {
      return line;
    }

    public void setLine(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"line\" is null.");
      }
      this.line = setterArg;
    }

    private @NonNull Long column;

    public @NonNull Long getColumn() {
      return column;
    }

    public void setColumn(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"column\" is null.");
      }
      this.column = setterArg;
    }

    private @NonNull String methodName;

    public @NonNull String getMethodName() {
      return methodName;
    }

    public void setMethodName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"methodName\" is null.");
      }
      this.methodName = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    StackTraceElementPigeon() {}

    public static final class Builder {

      private @Nullable String className;

      public @NonNull Builder setClassName(@NonNull String setterArg) {
        this.className = setterArg;
        return this;
      }

      private @Nullable String fileName;

      public @NonNull Builder setFileName(@Nullable String setterArg) {
        this.fileName = setterArg;
        return this;
      }

      private @Nullable Long line;

      public @NonNull Builder setLine(@NonNull Long setterArg) {
        this.line = setterArg;
        return this;
      }

      private @Nullable Long column;

      public @NonNull Builder setColumn(@NonNull Long setterArg) {
        this.column = setterArg;
        return this;
      }

      private @Nullable String methodName;

      public @NonNull Builder setMethodName(@NonNull String setterArg) {
        this.methodName = setterArg;
        return this;
      }

      public @NonNull StackTraceElementPigeon build() {
        StackTraceElementPigeon pigeonReturn = new StackTraceElementPigeon();
        pigeonReturn.setClassName(className);
        pigeonReturn.setFileName(fileName);
        pigeonReturn.setLine(line);
        pigeonReturn.setColumn(column);
        pigeonReturn.setMethodName(methodName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(className);
      toListResult.add(fileName);
      toListResult.add(line);
      toListResult.add(column);
      toListResult.add(methodName);
      return toListResult;
    }

    static @NonNull StackTraceElementPigeon fromList(@NonNull ArrayList<Object> list) {
      StackTraceElementPigeon pigeonResult = new StackTraceElementPigeon();
      Object className = list.get(0);
      pigeonResult.setClassName((String) className);
      Object fileName = list.get(1);
      pigeonResult.setFileName((String) fileName);
      Object line = list.get(2);
      pigeonResult.setLine((line == null) ? null : ((line instanceof Integer) ? (Integer) line : (Long) line));
      Object column = list.get(3);
      pigeonResult.setColumn((column == null) ? null : ((column instanceof Integer) ? (Integer) column : (Long) column));
      Object methodName = list.get(4);
      pigeonResult.setMethodName((String) methodName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ErrorDetailsPigeon {
    private @NonNull String exceptionClass;

    public @NonNull String getExceptionClass() {
      return exceptionClass;
    }

    public void setExceptionClass(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"exceptionClass\" is null.");
      }
      this.exceptionClass = setterArg;
    }

    private @Nullable String message;

    public @Nullable String getMessage() {
      return message;
    }

    public void setMessage(@Nullable String setterArg) {
      this.message = setterArg;
    }

    private @NonNull String dartVersion;

    public @NonNull String getDartVersion() {
      return dartVersion;
    }

    public void setDartVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dartVersion\" is null.");
      }
      this.dartVersion = setterArg;
    }

    private @Nullable List<StackTraceElementPigeon> backtrace;

    public @Nullable List<StackTraceElementPigeon> getBacktrace() {
      return backtrace;
    }

    public void setBacktrace(@Nullable List<StackTraceElementPigeon> setterArg) {
      this.backtrace = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ErrorDetailsPigeon() {}

    public static final class Builder {

      private @Nullable String exceptionClass;

      public @NonNull Builder setExceptionClass(@NonNull String setterArg) {
        this.exceptionClass = setterArg;
        return this;
      }

      private @Nullable String message;

      public @NonNull Builder setMessage(@Nullable String setterArg) {
        this.message = setterArg;
        return this;
      }

      private @Nullable String dartVersion;

      public @NonNull Builder setDartVersion(@NonNull String setterArg) {
        this.dartVersion = setterArg;
        return this;
      }

      private @Nullable List<StackTraceElementPigeon> backtrace;

      public @NonNull Builder setBacktrace(@Nullable List<StackTraceElementPigeon> setterArg) {
        this.backtrace = setterArg;
        return this;
      }

      public @NonNull ErrorDetailsPigeon build() {
        ErrorDetailsPigeon pigeonReturn = new ErrorDetailsPigeon();
        pigeonReturn.setExceptionClass(exceptionClass);
        pigeonReturn.setMessage(message);
        pigeonReturn.setDartVersion(dartVersion);
        pigeonReturn.setBacktrace(backtrace);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(exceptionClass);
      toListResult.add(message);
      toListResult.add(dartVersion);
      toListResult.add(backtrace);
      return toListResult;
    }

    static @NonNull ErrorDetailsPigeon fromList(@NonNull ArrayList<Object> list) {
      ErrorDetailsPigeon pigeonResult = new ErrorDetailsPigeon();
      Object exceptionClass = list.get(0);
      pigeonResult.setExceptionClass((String) exceptionClass);
      Object message = list.get(1);
      pigeonResult.setMessage((String) message);
      Object dartVersion = list.get(2);
      pigeonResult.setDartVersion((String) dartVersion);
      Object backtrace = list.get(3);
      pigeonResult.setBacktrace((List<StackTraceElementPigeon>) backtrace);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UserProfileAttributePigeon {
    private @NonNull String key;

    public @NonNull String getKey() {
      return key;
    }

    public void setKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"key\" is null.");
      }
      this.key = setterArg;
    }

    private @Nullable Double doubleValue;

    public @Nullable Double getDoubleValue() {
      return doubleValue;
    }

    public void setDoubleValue(@Nullable Double setterArg) {
      this.doubleValue = setterArg;
    }

    private @Nullable String stringValue;

    public @Nullable String getStringValue() {
      return stringValue;
    }

    public void setStringValue(@Nullable String setterArg) {
      this.stringValue = setterArg;
    }

    private @Nullable Boolean boolValue;

    public @Nullable Boolean getBoolValue() {
      return boolValue;
    }

    public void setBoolValue(@Nullable Boolean setterArg) {
      this.boolValue = setterArg;
    }

    private @Nullable Long year;

    public @Nullable Long getYear() {
      return year;
    }

    public void setYear(@Nullable Long setterArg) {
      this.year = setterArg;
    }

    private @Nullable Long month;

    public @Nullable Long getMonth() {
      return month;
    }

    public void setMonth(@Nullable Long setterArg) {
      this.month = setterArg;
    }

    private @Nullable Long day;

    public @Nullable Long getDay() {
      return day;
    }

    public void setDay(@Nullable Long setterArg) {
      this.day = setterArg;
    }

    private @Nullable Long age;

    public @Nullable Long getAge() {
      return age;
    }

    public void setAge(@Nullable Long setterArg) {
      this.age = setterArg;
    }

    private @Nullable GenderPigeon genderValue;

    public @Nullable GenderPigeon getGenderValue() {
      return genderValue;
    }

    public void setGenderValue(@Nullable GenderPigeon setterArg) {
      this.genderValue = setterArg;
    }

    private @Nullable Boolean ifUndefined;

    public @Nullable Boolean getIfUndefined() {
      return ifUndefined;
    }

    public void setIfUndefined(@Nullable Boolean setterArg) {
      this.ifUndefined = setterArg;
    }

    private @Nullable Boolean reset;

    public @Nullable Boolean getReset() {
      return reset;
    }

    public void setReset(@Nullable Boolean setterArg) {
      this.reset = setterArg;
    }

    private @Nullable UserProfileAttributeType type;

    public @Nullable UserProfileAttributeType getType() {
      return type;
    }

    public void setType(@Nullable UserProfileAttributeType setterArg) {
      this.type = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UserProfileAttributePigeon() {}

    public static final class Builder {

      private @Nullable String key;

      public @NonNull Builder setKey(@NonNull String setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable Double doubleValue;

      public @NonNull Builder setDoubleValue(@Nullable Double setterArg) {
        this.doubleValue = setterArg;
        return this;
      }

      private @Nullable String stringValue;

      public @NonNull Builder setStringValue(@Nullable String setterArg) {
        this.stringValue = setterArg;
        return this;
      }

      private @Nullable Boolean boolValue;

      public @NonNull Builder setBoolValue(@Nullable Boolean setterArg) {
        this.boolValue = setterArg;
        return this;
      }

      private @Nullable Long year;

      public @NonNull Builder setYear(@Nullable Long setterArg) {
        this.year = setterArg;
        return this;
      }

      private @Nullable Long month;

      public @NonNull Builder setMonth(@Nullable Long setterArg) {
        this.month = setterArg;
        return this;
      }

      private @Nullable Long day;

      public @NonNull Builder setDay(@Nullable Long setterArg) {
        this.day = setterArg;
        return this;
      }

      private @Nullable Long age;

      public @NonNull Builder setAge(@Nullable Long setterArg) {
        this.age = setterArg;
        return this;
      }

      private @Nullable GenderPigeon genderValue;

      public @NonNull Builder setGenderValue(@Nullable GenderPigeon setterArg) {
        this.genderValue = setterArg;
        return this;
      }

      private @Nullable Boolean ifUndefined;

      public @NonNull Builder setIfUndefined(@Nullable Boolean setterArg) {
        this.ifUndefined = setterArg;
        return this;
      }

      private @Nullable Boolean reset;

      public @NonNull Builder setReset(@Nullable Boolean setterArg) {
        this.reset = setterArg;
        return this;
      }

      private @Nullable UserProfileAttributeType type;

      public @NonNull Builder setType(@Nullable UserProfileAttributeType setterArg) {
        this.type = setterArg;
        return this;
      }

      public @NonNull UserProfileAttributePigeon build() {
        UserProfileAttributePigeon pigeonReturn = new UserProfileAttributePigeon();
        pigeonReturn.setKey(key);
        pigeonReturn.setDoubleValue(doubleValue);
        pigeonReturn.setStringValue(stringValue);
        pigeonReturn.setBoolValue(boolValue);
        pigeonReturn.setYear(year);
        pigeonReturn.setMonth(month);
        pigeonReturn.setDay(day);
        pigeonReturn.setAge(age);
        pigeonReturn.setGenderValue(genderValue);
        pigeonReturn.setIfUndefined(ifUndefined);
        pigeonReturn.setReset(reset);
        pigeonReturn.setType(type);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(key);
      toListResult.add(doubleValue);
      toListResult.add(stringValue);
      toListResult.add(boolValue);
      toListResult.add(year);
      toListResult.add(month);
      toListResult.add(day);
      toListResult.add(age);
      toListResult.add(genderValue == null ? null : genderValue.index);
      toListResult.add(ifUndefined);
      toListResult.add(reset);
      toListResult.add(type == null ? null : type.index);
      return toListResult;
    }

    static @NonNull UserProfileAttributePigeon fromList(@NonNull ArrayList<Object> list) {
      UserProfileAttributePigeon pigeonResult = new UserProfileAttributePigeon();
      Object key = list.get(0);
      pigeonResult.setKey((String) key);
      Object doubleValue = list.get(1);
      pigeonResult.setDoubleValue((Double) doubleValue);
      Object stringValue = list.get(2);
      pigeonResult.setStringValue((String) stringValue);
      Object boolValue = list.get(3);
      pigeonResult.setBoolValue((Boolean) boolValue);
      Object year = list.get(4);
      pigeonResult.setYear((year == null) ? null : ((year instanceof Integer) ? (Integer) year : (Long) year));
      Object month = list.get(5);
      pigeonResult.setMonth((month == null) ? null : ((month instanceof Integer) ? (Integer) month : (Long) month));
      Object day = list.get(6);
      pigeonResult.setDay((day == null) ? null : ((day instanceof Integer) ? (Integer) day : (Long) day));
      Object age = list.get(7);
      pigeonResult.setAge((age == null) ? null : ((age instanceof Integer) ? (Integer) age : (Long) age));
      Object genderValue = list.get(8);
      pigeonResult.setGenderValue(genderValue == null ? null : GenderPigeon.values()[(int) genderValue]);
      Object ifUndefined = list.get(9);
      pigeonResult.setIfUndefined((Boolean) ifUndefined);
      Object reset = list.get(10);
      pigeonResult.setReset((Boolean) reset);
      Object type = list.get(11);
      pigeonResult.setType(type == null ? null : UserProfileAttributeType.values()[(int) type]);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class UserProfilePigeon {
    private @NonNull List<UserProfileAttributePigeon> attributes;

    public @NonNull List<UserProfileAttributePigeon> getAttributes() {
      return attributes;
    }

    public void setAttributes(@NonNull List<UserProfileAttributePigeon> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"attributes\" is null.");
      }
      this.attributes = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    UserProfilePigeon() {}

    public static final class Builder {

      private @Nullable List<UserProfileAttributePigeon> attributes;

      public @NonNull Builder setAttributes(@NonNull List<UserProfileAttributePigeon> setterArg) {
        this.attributes = setterArg;
        return this;
      }

      public @NonNull UserProfilePigeon build() {
        UserProfilePigeon pigeonReturn = new UserProfilePigeon();
        pigeonReturn.setAttributes(attributes);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(attributes);
      return toListResult;
    }

    static @NonNull UserProfilePigeon fromList(@NonNull ArrayList<Object> list) {
      UserProfilePigeon pigeonResult = new UserProfilePigeon();
      Object attributes = list.get(0);
      pigeonResult.setAttributes((List<UserProfileAttributePigeon>) attributes);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class AdRevenuePigeon {
    private @NonNull String adRevenue;

    public @NonNull String getAdRevenue() {
      return adRevenue;
    }

    public void setAdRevenue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"adRevenue\" is null.");
      }
      this.adRevenue = setterArg;
    }

    private @NonNull String currency;

    public @NonNull String getCurrency() {
      return currency;
    }

    public void setCurrency(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"currency\" is null.");
      }
      this.currency = setterArg;
    }

    private @Nullable AdTypePigeon adType;

    public @Nullable AdTypePigeon getAdType() {
      return adType;
    }

    public void setAdType(@Nullable AdTypePigeon setterArg) {
      this.adType = setterArg;
    }

    private @Nullable String adNetwork;

    public @Nullable String getAdNetwork() {
      return adNetwork;
    }

    public void setAdNetwork(@Nullable String setterArg) {
      this.adNetwork = setterArg;
    }

    private @Nullable String adUnitId;

    public @Nullable String getAdUnitId() {
      return adUnitId;
    }

    public void setAdUnitId(@Nullable String setterArg) {
      this.adUnitId = setterArg;
    }

    private @Nullable String adUnitName;

    public @Nullable String getAdUnitName() {
      return adUnitName;
    }

    public void setAdUnitName(@Nullable String setterArg) {
      this.adUnitName = setterArg;
    }

    private @Nullable String adPlacementId;

    public @Nullable String getAdPlacementId() {
      return adPlacementId;
    }

    public void setAdPlacementId(@Nullable String setterArg) {
      this.adPlacementId = setterArg;
    }

    private @Nullable String adPlacementName;

    public @Nullable String getAdPlacementName() {
      return adPlacementName;
    }

    public void setAdPlacementName(@Nullable String setterArg) {
      this.adPlacementName = setterArg;
    }

    private @Nullable String precision;

    public @Nullable String getPrecision() {
      return precision;
    }

    public void setPrecision(@Nullable String setterArg) {
      this.precision = setterArg;
    }

    private @Nullable Map<String, String> payload;

    public @Nullable Map<String, String> getPayload() {
      return payload;
    }

    public void setPayload(@Nullable Map<String, String> setterArg) {
      this.payload = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    AdRevenuePigeon() {}

    public static final class Builder {

      private @Nullable String adRevenue;

      public @NonNull Builder setAdRevenue(@NonNull String setterArg) {
        this.adRevenue = setterArg;
        return this;
      }

      private @Nullable String currency;

      public @NonNull Builder setCurrency(@NonNull String setterArg) {
        this.currency = setterArg;
        return this;
      }

      private @Nullable AdTypePigeon adType;

      public @NonNull Builder setAdType(@Nullable AdTypePigeon setterArg) {
        this.adType = setterArg;
        return this;
      }

      private @Nullable String adNetwork;

      public @NonNull Builder setAdNetwork(@Nullable String setterArg) {
        this.adNetwork = setterArg;
        return this;
      }

      private @Nullable String adUnitId;

      public @NonNull Builder setAdUnitId(@Nullable String setterArg) {
        this.adUnitId = setterArg;
        return this;
      }

      private @Nullable String adUnitName;

      public @NonNull Builder setAdUnitName(@Nullable String setterArg) {
        this.adUnitName = setterArg;
        return this;
      }

      private @Nullable String adPlacementId;

      public @NonNull Builder setAdPlacementId(@Nullable String setterArg) {
        this.adPlacementId = setterArg;
        return this;
      }

      private @Nullable String adPlacementName;

      public @NonNull Builder setAdPlacementName(@Nullable String setterArg) {
        this.adPlacementName = setterArg;
        return this;
      }

      private @Nullable String precision;

      public @NonNull Builder setPrecision(@Nullable String setterArg) {
        this.precision = setterArg;
        return this;
      }

      private @Nullable Map<String, String> payload;

      public @NonNull Builder setPayload(@Nullable Map<String, String> setterArg) {
        this.payload = setterArg;
        return this;
      }

      public @NonNull AdRevenuePigeon build() {
        AdRevenuePigeon pigeonReturn = new AdRevenuePigeon();
        pigeonReturn.setAdRevenue(adRevenue);
        pigeonReturn.setCurrency(currency);
        pigeonReturn.setAdType(adType);
        pigeonReturn.setAdNetwork(adNetwork);
        pigeonReturn.setAdUnitId(adUnitId);
        pigeonReturn.setAdUnitName(adUnitName);
        pigeonReturn.setAdPlacementId(adPlacementId);
        pigeonReturn.setAdPlacementName(adPlacementName);
        pigeonReturn.setPrecision(precision);
        pigeonReturn.setPayload(payload);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(10);
      toListResult.add(adRevenue);
      toListResult.add(currency);
      toListResult.add(adType == null ? null : adType.index);
      toListResult.add(adNetwork);
      toListResult.add(adUnitId);
      toListResult.add(adUnitName);
      toListResult.add(adPlacementId);
      toListResult.add(adPlacementName);
      toListResult.add(precision);
      toListResult.add(payload);
      return toListResult;
    }

    static @NonNull AdRevenuePigeon fromList(@NonNull ArrayList<Object> list) {
      AdRevenuePigeon pigeonResult = new AdRevenuePigeon();
      Object adRevenue = list.get(0);
      pigeonResult.setAdRevenue((String) adRevenue);
      Object currency = list.get(1);
      pigeonResult.setCurrency((String) currency);
      Object adType = list.get(2);
      pigeonResult.setAdType(adType == null ? null : AdTypePigeon.values()[(int) adType]);
      Object adNetwork = list.get(3);
      pigeonResult.setAdNetwork((String) adNetwork);
      Object adUnitId = list.get(4);
      pigeonResult.setAdUnitId((String) adUnitId);
      Object adUnitName = list.get(5);
      pigeonResult.setAdUnitName((String) adUnitName);
      Object adPlacementId = list.get(6);
      pigeonResult.setAdPlacementId((String) adPlacementId);
      Object adPlacementName = list.get(7);
      pigeonResult.setAdPlacementName((String) adPlacementName);
      Object precision = list.get(8);
      pigeonResult.setPrecision((String) precision);
      Object payload = list.get(9);
      pigeonResult.setPayload((Map<String, String>) payload);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StartupParamsItemPigeon {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @NonNull StartupParamsItemStatusPigeon status;

    public @NonNull StartupParamsItemStatusPigeon getStatus() {
      return status;
    }

    public void setStatus(@NonNull StartupParamsItemStatusPigeon setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"status\" is null.");
      }
      this.status = setterArg;
    }

    private @Nullable String errorDetails;

    public @Nullable String getErrorDetails() {
      return errorDetails;
    }

    public void setErrorDetails(@Nullable String setterArg) {
      this.errorDetails = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    StartupParamsItemPigeon() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable StartupParamsItemStatusPigeon status;

      public @NonNull Builder setStatus(@NonNull StartupParamsItemStatusPigeon setterArg) {
        this.status = setterArg;
        return this;
      }

      private @Nullable String errorDetails;

      public @NonNull Builder setErrorDetails(@Nullable String setterArg) {
        this.errorDetails = setterArg;
        return this;
      }

      public @NonNull StartupParamsItemPigeon build() {
        StartupParamsItemPigeon pigeonReturn = new StartupParamsItemPigeon();
        pigeonReturn.setId(id);
        pigeonReturn.setStatus(status);
        pigeonReturn.setErrorDetails(errorDetails);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(id);
      toListResult.add(status == null ? null : status.index);
      toListResult.add(errorDetails);
      return toListResult;
    }

    static @NonNull StartupParamsItemPigeon fromList(@NonNull ArrayList<Object> list) {
      StartupParamsItemPigeon pigeonResult = new StartupParamsItemPigeon();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object status = list.get(1);
      pigeonResult.setStatus(status == null ? null : StartupParamsItemStatusPigeon.values()[(int) status]);
      Object errorDetails = list.get(2);
      pigeonResult.setErrorDetails((String) errorDetails);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StartupParamsResultPigeon {
    private @Nullable String deviceId;

    public @Nullable String getDeviceId() {
      return deviceId;
    }

    public void setDeviceId(@Nullable String setterArg) {
      this.deviceId = setterArg;
    }

    private @Nullable String deviceIdHash;

    public @Nullable String getDeviceIdHash() {
      return deviceIdHash;
    }

    public void setDeviceIdHash(@Nullable String setterArg) {
      this.deviceIdHash = setterArg;
    }

    private @Nullable Map<String, StartupParamsItemPigeon> parameters;

    public @Nullable Map<String, StartupParamsItemPigeon> getParameters() {
      return parameters;
    }

    public void setParameters(@Nullable Map<String, StartupParamsItemPigeon> setterArg) {
      this.parameters = setterArg;
    }

    private @Nullable String uuid;

    public @Nullable String getUuid() {
      return uuid;
    }

    public void setUuid(@Nullable String setterArg) {
      this.uuid = setterArg;
    }

    public static final class Builder {

      private @Nullable String deviceId;

      public @NonNull Builder setDeviceId(@Nullable String setterArg) {
        this.deviceId = setterArg;
        return this;
      }

      private @Nullable String deviceIdHash;

      public @NonNull Builder setDeviceIdHash(@Nullable String setterArg) {
        this.deviceIdHash = setterArg;
        return this;
      }

      private @Nullable Map<String, StartupParamsItemPigeon> parameters;

      public @NonNull Builder setParameters(@Nullable Map<String, StartupParamsItemPigeon> setterArg) {
        this.parameters = setterArg;
        return this;
      }

      private @Nullable String uuid;

      public @NonNull Builder setUuid(@Nullable String setterArg) {
        this.uuid = setterArg;
        return this;
      }

      public @NonNull StartupParamsResultPigeon build() {
        StartupParamsResultPigeon pigeonReturn = new StartupParamsResultPigeon();
        pigeonReturn.setDeviceId(deviceId);
        pigeonReturn.setDeviceIdHash(deviceIdHash);
        pigeonReturn.setParameters(parameters);
        pigeonReturn.setUuid(uuid);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(deviceId);
      toListResult.add(deviceIdHash);
      toListResult.add(parameters);
      toListResult.add(uuid);
      return toListResult;
    }

    static @NonNull StartupParamsResultPigeon fromList(@NonNull ArrayList<Object> list) {
      StartupParamsResultPigeon pigeonResult = new StartupParamsResultPigeon();
      Object deviceId = list.get(0);
      pigeonResult.setDeviceId((String) deviceId);
      Object deviceIdHash = list.get(1);
      pigeonResult.setDeviceIdHash((String) deviceIdHash);
      Object parameters = list.get(2);
      pigeonResult.setParameters((Map<String, StartupParamsItemPigeon>) parameters);
      Object uuid = list.get(3);
      pigeonResult.setUuid((String) uuid);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StartupParamsReasonPigeon {
    private @NonNull String value;

    public @NonNull String getValue() {
      return value;
    }

    public void setValue(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"value\" is null.");
      }
      this.value = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    StartupParamsReasonPigeon() {}

    public static final class Builder {

      private @Nullable String value;

      public @NonNull Builder setValue(@NonNull String setterArg) {
        this.value = setterArg;
        return this;
      }

      public @NonNull StartupParamsReasonPigeon build() {
        StartupParamsReasonPigeon pigeonReturn = new StartupParamsReasonPigeon();
        pigeonReturn.setValue(value);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(value);
      return toListResult;
    }

    static @NonNull StartupParamsReasonPigeon fromList(@NonNull ArrayList<Object> list) {
      StartupParamsReasonPigeon pigeonResult = new StartupParamsReasonPigeon();
      Object value = list.get(0);
      pigeonResult.setValue((String) value);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class StartupParamsPigeon {
    private @Nullable StartupParamsResultPigeon result;

    public @Nullable StartupParamsResultPigeon getResult() {
      return result;
    }

    public void setResult(@Nullable StartupParamsResultPigeon setterArg) {
      this.result = setterArg;
    }

    private @Nullable StartupParamsReasonPigeon reason;

    public @Nullable StartupParamsReasonPigeon getReason() {
      return reason;
    }

    public void setReason(@Nullable StartupParamsReasonPigeon setterArg) {
      this.reason = setterArg;
    }

    public static final class Builder {

      private @Nullable StartupParamsResultPigeon result;

      public @NonNull Builder setResult(@Nullable StartupParamsResultPigeon setterArg) {
        this.result = setterArg;
        return this;
      }

      private @Nullable StartupParamsReasonPigeon reason;

      public @NonNull Builder setReason(@Nullable StartupParamsReasonPigeon setterArg) {
        this.reason = setterArg;
        return this;
      }

      public @NonNull StartupParamsPigeon build() {
        StartupParamsPigeon pigeonReturn = new StartupParamsPigeon();
        pigeonReturn.setResult(result);
        pigeonReturn.setReason(reason);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add((result == null) ? null : result.toList());
      toListResult.add((reason == null) ? null : reason.toList());
      return toListResult;
    }

    static @NonNull StartupParamsPigeon fromList(@NonNull ArrayList<Object> list) {
      StartupParamsPigeon pigeonResult = new StartupParamsPigeon();
      Object result = list.get(0);
      pigeonResult.setResult((result == null) ? null : StartupParamsResultPigeon.fromList((ArrayList<Object>) result));
      Object reason = list.get(1);
      pigeonResult.setReason((reason == null) ? null : StartupParamsReasonPigeon.fromList((ArrayList<Object>) reason));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ExternalAttributionPigeon {
    private @NonNull String source;

    public @NonNull String getSource() {
      return source;
    }

    public void setSource(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"source\" is null.");
      }
      this.source = setterArg;
    }

    private @NonNull Map<String, Object> data;

    public @NonNull Map<String, Object> getData() {
      return data;
    }

    public void setData(@NonNull Map<String, Object> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ExternalAttributionPigeon() {}

    public static final class Builder {

      private @Nullable String source;

      public @NonNull Builder setSource(@NonNull String setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable Map<String, Object> data;

      public @NonNull Builder setData(@NonNull Map<String, Object> setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull ExternalAttributionPigeon build() {
        ExternalAttributionPigeon pigeonReturn = new ExternalAttributionPigeon();
        pigeonReturn.setSource(source);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(source);
      toListResult.add(data);
      return toListResult;
    }

    static @NonNull ExternalAttributionPigeon fromList(@NonNull ArrayList<Object> list) {
      ExternalAttributionPigeon pigeonResult = new ExternalAttributionPigeon();
      Object source = list.get(0);
      pigeonResult.setSource((String) source);
      Object data = list.get(1);
      pigeonResult.setData((Map<String, Object>) data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ReporterConfigPigeon {
    private @NonNull String apiKey;

    public @NonNull String getApiKey() {
      return apiKey;
    }

    public void setApiKey(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"apiKey\" is null.");
      }
      this.apiKey = setterArg;
    }

    private @Nullable Map<String, String> appEnvironment;

    public @Nullable Map<String, String> getAppEnvironment() {
      return appEnvironment;
    }

    public void setAppEnvironment(@Nullable Map<String, String> setterArg) {
      this.appEnvironment = setterArg;
    }

    private @Nullable Boolean dataSendingEnabled;

    public @Nullable Boolean getDataSendingEnabled() {
      return dataSendingEnabled;
    }

    public void setDataSendingEnabled(@Nullable Boolean setterArg) {
      this.dataSendingEnabled = setterArg;
    }

    private @Nullable Long dispatchPeriodSeconds;

    public @Nullable Long getDispatchPeriodSeconds() {
      return dispatchPeriodSeconds;
    }

    public void setDispatchPeriodSeconds(@Nullable Long setterArg) {
      this.dispatchPeriodSeconds = setterArg;
    }

    private @Nullable Boolean logs;

    public @Nullable Boolean getLogs() {
      return logs;
    }

    public void setLogs(@Nullable Boolean setterArg) {
      this.logs = setterArg;
    }

    private @Nullable Long maxReportsCount;

    public @Nullable Long getMaxReportsCount() {
      return maxReportsCount;
    }

    public void setMaxReportsCount(@Nullable Long setterArg) {
      this.maxReportsCount = setterArg;
    }

    private @Nullable Long maxReportsInDatabaseCount;

    public @Nullable Long getMaxReportsInDatabaseCount() {
      return maxReportsInDatabaseCount;
    }

    public void setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
      this.maxReportsInDatabaseCount = setterArg;
    }

    private @Nullable Long sessionTimeout;

    public @Nullable Long getSessionTimeout() {
      return sessionTimeout;
    }

    public void setSessionTimeout(@Nullable Long setterArg) {
      this.sessionTimeout = setterArg;
    }

    private @Nullable String userProfileID;

    public @Nullable String getUserProfileID() {
      return userProfileID;
    }

    public void setUserProfileID(@Nullable String setterArg) {
      this.userProfileID = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ReporterConfigPigeon() {}

    public static final class Builder {

      private @Nullable String apiKey;

      public @NonNull Builder setApiKey(@NonNull String setterArg) {
        this.apiKey = setterArg;
        return this;
      }

      private @Nullable Map<String, String> appEnvironment;

      public @NonNull Builder setAppEnvironment(@Nullable Map<String, String> setterArg) {
        this.appEnvironment = setterArg;
        return this;
      }

      private @Nullable Boolean dataSendingEnabled;

      public @NonNull Builder setDataSendingEnabled(@Nullable Boolean setterArg) {
        this.dataSendingEnabled = setterArg;
        return this;
      }

      private @Nullable Long dispatchPeriodSeconds;

      public @NonNull Builder setDispatchPeriodSeconds(@Nullable Long setterArg) {
        this.dispatchPeriodSeconds = setterArg;
        return this;
      }

      private @Nullable Boolean logs;

      public @NonNull Builder setLogs(@Nullable Boolean setterArg) {
        this.logs = setterArg;
        return this;
      }

      private @Nullable Long maxReportsCount;

      public @NonNull Builder setMaxReportsCount(@Nullable Long setterArg) {
        this.maxReportsCount = setterArg;
        return this;
      }

      private @Nullable Long maxReportsInDatabaseCount;

      public @NonNull Builder setMaxReportsInDatabaseCount(@Nullable Long setterArg) {
        this.maxReportsInDatabaseCount = setterArg;
        return this;
      }

      private @Nullable Long sessionTimeout;

      public @NonNull Builder setSessionTimeout(@Nullable Long setterArg) {
        this.sessionTimeout = setterArg;
        return this;
      }

      private @Nullable String userProfileID;

      public @NonNull Builder setUserProfileID(@Nullable String setterArg) {
        this.userProfileID = setterArg;
        return this;
      }

      public @NonNull ReporterConfigPigeon build() {
        ReporterConfigPigeon pigeonReturn = new ReporterConfigPigeon();
        pigeonReturn.setApiKey(apiKey);
        pigeonReturn.setAppEnvironment(appEnvironment);
        pigeonReturn.setDataSendingEnabled(dataSendingEnabled);
        pigeonReturn.setDispatchPeriodSeconds(dispatchPeriodSeconds);
        pigeonReturn.setLogs(logs);
        pigeonReturn.setMaxReportsCount(maxReportsCount);
        pigeonReturn.setMaxReportsInDatabaseCount(maxReportsInDatabaseCount);
        pigeonReturn.setSessionTimeout(sessionTimeout);
        pigeonReturn.setUserProfileID(userProfileID);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(9);
      toListResult.add(apiKey);
      toListResult.add(appEnvironment);
      toListResult.add(dataSendingEnabled);
      toListResult.add(dispatchPeriodSeconds);
      toListResult.add(logs);
      toListResult.add(maxReportsCount);
      toListResult.add(maxReportsInDatabaseCount);
      toListResult.add(sessionTimeout);
      toListResult.add(userProfileID);
      return toListResult;
    }

    static @NonNull ReporterConfigPigeon fromList(@NonNull ArrayList<Object> list) {
      ReporterConfigPigeon pigeonResult = new ReporterConfigPigeon();
      Object apiKey = list.get(0);
      pigeonResult.setApiKey((String) apiKey);
      Object appEnvironment = list.get(1);
      pigeonResult.setAppEnvironment((Map<String, String>) appEnvironment);
      Object dataSendingEnabled = list.get(2);
      pigeonResult.setDataSendingEnabled((Boolean) dataSendingEnabled);
      Object dispatchPeriodSeconds = list.get(3);
      pigeonResult.setDispatchPeriodSeconds((dispatchPeriodSeconds == null) ? null : ((dispatchPeriodSeconds instanceof Integer) ? (Integer) dispatchPeriodSeconds : (Long) dispatchPeriodSeconds));
      Object logs = list.get(4);
      pigeonResult.setLogs((Boolean) logs);
      Object maxReportsCount = list.get(5);
      pigeonResult.setMaxReportsCount((maxReportsCount == null) ? null : ((maxReportsCount instanceof Integer) ? (Integer) maxReportsCount : (Long) maxReportsCount));
      Object maxReportsInDatabaseCount = list.get(6);
      pigeonResult.setMaxReportsInDatabaseCount((maxReportsInDatabaseCount == null) ? null : ((maxReportsInDatabaseCount instanceof Integer) ? (Integer) maxReportsInDatabaseCount : (Long) maxReportsInDatabaseCount));
      Object sessionTimeout = list.get(7);
      pigeonResult.setSessionTimeout((sessionTimeout == null) ? null : ((sessionTimeout instanceof Integer) ? (Integer) sessionTimeout : (Long) sessionTimeout));
      Object userProfileID = list.get(8);
      pigeonResult.setUserProfileID((String) userProfileID);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class AppMetricaConfigConverterPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaConfigConverterPigeonCodec INSTANCE = new AppMetricaConfigConverterPigeonCodec();

    private AppMetricaConfigConverterPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AppMetricaConfigPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return LocationPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PreloadInfoPigeon.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AppMetricaConfigPigeon) {
        stream.write(128);
        writeValue(stream, ((AppMetricaConfigPigeon) value).toList());
      } else if (value instanceof LocationPigeon) {
        stream.write(129);
        writeValue(stream, ((LocationPigeon) value).toList());
      } else if (value instanceof PreloadInfoPigeon) {
        stream.write(130);
        writeValue(stream, ((PreloadInfoPigeon) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AppMetricaConfigConverterPigeon {

    @NonNull 
    String toJson(@NonNull AppMetricaConfigPigeon config);

    /** The codec used by AppMetricaConfigConverterPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return AppMetricaConfigConverterPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `AppMetricaConfigConverterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable AppMetricaConfigConverterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaConfigConverterPigeon.toJson", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AppMetricaConfigPigeon configArg = (AppMetricaConfigPigeon) args.get(0);
                try {
                  String output = api.toJson(configArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class AppMetricaPigeonCodec extends StandardMessageCodec {
    public static final AppMetricaPigeonCodec INSTANCE = new AppMetricaPigeonCodec();

    private AppMetricaPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AdRevenuePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return AppMetricaConfigPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return AppMetricaDeferredDeeplinkErrorPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return AppMetricaDeferredDeeplinkParametersPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return AppMetricaDeferredDeeplinkPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return ECommerceAmountPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return ECommerceAmountPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return ECommerceCartItemPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return ECommerceEventPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return ECommerceOrderPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return ECommercePricePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return ECommercePricePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return ECommerceProductPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return ECommerceProductPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return ECommerceReferrerPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return ECommerceScreenPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return ErrorDetailsPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return ErrorDetailsPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 146:
          return ExternalAttributionPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 147:
          return LocationPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 148:
          return PreloadInfoPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 149:
          return ReceiptPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 150:
          return ReporterConfigPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 151:
          return RevenuePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 152:
          return StackTraceElementPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 153:
          return StartupParamsItemPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 154:
          return StartupParamsPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 155:
          return StartupParamsReasonPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 156:
          return StartupParamsResultPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 157:
          return UserProfileAttributePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 158:
          return UserProfilePigeon.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AdRevenuePigeon) {
        stream.write(128);
        writeValue(stream, ((AdRevenuePigeon) value).toList());
      } else if (value instanceof AppMetricaConfigPigeon) {
        stream.write(129);
        writeValue(stream, ((AppMetricaConfigPigeon) value).toList());
      } else if (value instanceof AppMetricaDeferredDeeplinkErrorPigeon) {
        stream.write(130);
        writeValue(stream, ((AppMetricaDeferredDeeplinkErrorPigeon) value).toList());
      } else if (value instanceof AppMetricaDeferredDeeplinkParametersPigeon) {
        stream.write(131);
        writeValue(stream, ((AppMetricaDeferredDeeplinkParametersPigeon) value).toList());
      } else if (value instanceof AppMetricaDeferredDeeplinkPigeon) {
        stream.write(132);
        writeValue(stream, ((AppMetricaDeferredDeeplinkPigeon) value).toList());
      } else if (value instanceof ECommerceAmountPigeon) {
        stream.write(133);
        writeValue(stream, ((ECommerceAmountPigeon) value).toList());
      } else if (value instanceof ECommerceAmountPigeon) {
        stream.write(134);
        writeValue(stream, ((ECommerceAmountPigeon) value).toList());
      } else if (value instanceof ECommerceCartItemPigeon) {
        stream.write(135);
        writeValue(stream, ((ECommerceCartItemPigeon) value).toList());
      } else if (value instanceof ECommerceEventPigeon) {
        stream.write(136);
        writeValue(stream, ((ECommerceEventPigeon) value).toList());
      } else if (value instanceof ECommerceOrderPigeon) {
        stream.write(137);
        writeValue(stream, ((ECommerceOrderPigeon) value).toList());
      } else if (value instanceof ECommercePricePigeon) {
        stream.write(138);
        writeValue(stream, ((ECommercePricePigeon) value).toList());
      } else if (value instanceof ECommercePricePigeon) {
        stream.write(139);
        writeValue(stream, ((ECommercePricePigeon) value).toList());
      } else if (value instanceof ECommerceProductPigeon) {
        stream.write(140);
        writeValue(stream, ((ECommerceProductPigeon) value).toList());
      } else if (value instanceof ECommerceProductPigeon) {
        stream.write(141);
        writeValue(stream, ((ECommerceProductPigeon) value).toList());
      } else if (value instanceof ECommerceReferrerPigeon) {
        stream.write(142);
        writeValue(stream, ((ECommerceReferrerPigeon) value).toList());
      } else if (value instanceof ECommerceScreenPigeon) {
        stream.write(143);
        writeValue(stream, ((ECommerceScreenPigeon) value).toList());
      } else if (value instanceof ErrorDetailsPigeon) {
        stream.write(144);
        writeValue(stream, ((ErrorDetailsPigeon) value).toList());
      } else if (value instanceof ErrorDetailsPigeon) {
        stream.write(145);
        writeValue(stream, ((ErrorDetailsPigeon) value).toList());
      } else if (value instanceof ExternalAttributionPigeon) {
        stream.write(146);
        writeValue(stream, ((ExternalAttributionPigeon) value).toList());
      } else if (value instanceof LocationPigeon) {
        stream.write(147);
        writeValue(stream, ((LocationPigeon) value).toList());
      } else if (value instanceof PreloadInfoPigeon) {
        stream.write(148);
        writeValue(stream, ((PreloadInfoPigeon) value).toList());
      } else if (value instanceof ReceiptPigeon) {
        stream.write(149);
        writeValue(stream, ((ReceiptPigeon) value).toList());
      } else if (value instanceof ReporterConfigPigeon) {
        stream.write(150);
        writeValue(stream, ((ReporterConfigPigeon) value).toList());
      } else if (value instanceof RevenuePigeon) {
        stream.write(151);
        writeValue(stream, ((RevenuePigeon) value).toList());
      } else if (value instanceof StackTraceElementPigeon) {
        stream.write(152);
        writeValue(stream, ((StackTraceElementPigeon) value).toList());
      } else if (value instanceof StartupParamsItemPigeon) {
        stream.write(153);
        writeValue(stream, ((StartupParamsItemPigeon) value).toList());
      } else if (value instanceof StartupParamsPigeon) {
        stream.write(154);
        writeValue(stream, ((StartupParamsPigeon) value).toList());
      } else if (value instanceof StartupParamsReasonPigeon) {
        stream.write(155);
        writeValue(stream, ((StartupParamsReasonPigeon) value).toList());
      } else if (value instanceof StartupParamsResultPigeon) {
        stream.write(156);
        writeValue(stream, ((StartupParamsResultPigeon) value).toList());
      } else if (value instanceof UserProfileAttributePigeon) {
        stream.write(157);
        writeValue(stream, ((UserProfileAttributePigeon) value).toList());
      } else if (value instanceof UserProfilePigeon) {
        stream.write(158);
        writeValue(stream, ((UserProfilePigeon) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AppMetricaPigeon {

    void activate(@NonNull AppMetricaConfigPigeon config);

    void activateReporter(@NonNull ReporterConfigPigeon config);

    void clearAppEnvironment();

    void enableActivityAutoTracking();

    @Nullable 
    String getDeviceId();

    @NonNull 
    Long getLibraryApiLevel();

    @NonNull 
    String getLibraryVersion();

    @Nullable 
    String getUuid();

    void pauseSession();

    void putAppEnvironmentValue(@NonNull String key, @Nullable String value);

    void putErrorEnvironmentValue(@NonNull String key, @Nullable String value);

    void reportAdRevenue(@NonNull AdRevenuePigeon adRevenue);

    void reportAppOpen(@NonNull String deeplink);

    void reportECommerce(@NonNull ECommerceEventPigeon event);

    void reportError(@NonNull ErrorDetailsPigeon error, @Nullable String message);

    void reportErrorWithGroup(@NonNull String groupId, @Nullable ErrorDetailsPigeon error, @Nullable String message);

    void reportEvent(@NonNull String eventName);

    void reportEventWithJson(@NonNull String eventName, @Nullable String attributesJson);

    void reportExternalAttribution(@NonNull ExternalAttributionPigeon externalAttributionPigeon);

    void reportReferralUrl(@NonNull String referralUrl);

    void reportRevenue(@NonNull RevenuePigeon revenue);

    void reportUnhandledException(@NonNull ErrorDetailsPigeon error);

    void reportUserProfile(@NonNull UserProfilePigeon userProfile);

    void requestDeferredDeeplink(@NonNull Result<AppMetricaDeferredDeeplinkPigeon> result);

    void requestDeferredDeeplinkParameters(@NonNull Result<AppMetricaDeferredDeeplinkParametersPigeon> result);

    void requestStartupParams(@NonNull List<String> params, @NonNull Result<StartupParamsPigeon> result);

    void resumeSession();

    void sendEventsBuffer();

    void setAdvIdentifiersTracking(@NonNull Boolean enabled);

    void setDataSendingEnabled(@NonNull Boolean enabled);

    void setLocation(@Nullable LocationPigeon location);

    void setLocationTracking(@NonNull Boolean enabled);

    void setUserProfileID(@Nullable String userProfileID);

    void handlePluginInitFinished();

    void touchReporter(@NonNull String apiKey);

    /** The codec used by AppMetricaPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return AppMetricaPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `AppMetricaPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable AppMetricaPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.activate", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AppMetricaConfigPigeon configArg = (AppMetricaConfigPigeon) args.get(0);
                try {
                  api.activate(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.activateReporter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ReporterConfigPigeon configArg = (ReporterConfigPigeon) args.get(0);
                try {
                  api.activateReporter(configArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.clearAppEnvironment", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.clearAppEnvironment();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.enableActivityAutoTracking", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.enableActivityAutoTracking();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getDeviceId", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getDeviceId();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getLibraryApiLevel", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  Long output = api.getLibraryApiLevel();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getLibraryVersion", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getLibraryVersion();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getUuid", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getUuid();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.pauseSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.pauseSession();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.putAppEnvironmentValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String keyArg = (String) args.get(0);
                String valueArg = (String) args.get(1);
                try {
                  api.putAppEnvironmentValue(keyArg, valueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.putErrorEnvironmentValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String keyArg = (String) args.get(0);
                String valueArg = (String) args.get(1);
                try {
                  api.putErrorEnvironmentValue(keyArg, valueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportAdRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                AdRevenuePigeon adRevenueArg = (AdRevenuePigeon) args.get(0);
                try {
                  api.reportAdRevenue(adRevenueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportAppOpen", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String deeplinkArg = (String) args.get(0);
                try {
                  api.reportAppOpen(deeplinkArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportECommerce", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ECommerceEventPigeon eventArg = (ECommerceEventPigeon) args.get(0);
                try {
                  api.reportECommerce(eventArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportError", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon) args.get(0);
                String messageArg = (String) args.get(1);
                try {
                  api.reportError(errorArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportErrorWithGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String groupIdArg = (String) args.get(0);
                ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon) args.get(1);
                String messageArg = (String) args.get(2);
                try {
                  api.reportErrorWithGroup(groupIdArg, errorArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportEvent", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String eventNameArg = (String) args.get(0);
                try {
                  api.reportEvent(eventNameArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportEventWithJson", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String eventNameArg = (String) args.get(0);
                String attributesJsonArg = (String) args.get(1);
                try {
                  api.reportEventWithJson(eventNameArg, attributesJsonArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportExternalAttribution", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ExternalAttributionPigeon externalAttributionPigeonArg = (ExternalAttributionPigeon) args.get(0);
                try {
                  api.reportExternalAttribution(externalAttributionPigeonArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportReferralUrl", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String referralUrlArg = (String) args.get(0);
                try {
                  api.reportReferralUrl(referralUrlArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                RevenuePigeon revenueArg = (RevenuePigeon) args.get(0);
                try {
                  api.reportRevenue(revenueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportUnhandledException", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon) args.get(0);
                try {
                  api.reportUnhandledException(errorArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportUserProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                UserProfilePigeon userProfileArg = (UserProfilePigeon) args.get(0);
                try {
                  api.reportUserProfile(userProfileArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestDeferredDeeplink", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<AppMetricaDeferredDeeplinkPigeon> resultCallback =
                    new Result<AppMetricaDeferredDeeplinkPigeon>() {
                      public void success(AppMetricaDeferredDeeplinkPigeon result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestDeferredDeeplink(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestDeferredDeeplinkParameters", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                Result<AppMetricaDeferredDeeplinkParametersPigeon> resultCallback =
                    new Result<AppMetricaDeferredDeeplinkParametersPigeon>() {
                      public void success(AppMetricaDeferredDeeplinkParametersPigeon result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestDeferredDeeplinkParameters(resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestStartupParams", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                List<String> paramsArg = (List<String>) args.get(0);
                Result<StartupParamsPigeon> resultCallback =
                    new Result<StartupParamsPigeon>() {
                      public void success(StartupParamsPigeon result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.requestStartupParams(paramsArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.resumeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.resumeSession();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.sendEventsBuffer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.sendEventsBuffer();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setAdvIdentifiersTracking", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                try {
                  api.setAdvIdentifiersTracking(enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setDataSendingEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                try {
                  api.setDataSendingEnabled(enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setLocation", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                LocationPigeon locationArg = (LocationPigeon) args.get(0);
                try {
                  api.setLocation(locationArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setLocationTracking", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Boolean enabledArg = (Boolean) args.get(0);
                try {
                  api.setLocationTracking(enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setUserProfileID", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String userProfileIDArg = (String) args.get(0);
                try {
                  api.setUserProfileID(userProfileIDArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.handlePluginInitFinished", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  api.handlePluginInitFinished();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.touchReporter", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                try {
                  api.touchReporter(apiKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface AppMetricaLibraryAdapterPigeon {

    void subscribeForAutoCollectedData(@NonNull String apiKey);

    /** The codec used by AppMetricaLibraryAdapterPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `AppMetricaLibraryAdapterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable AppMetricaLibraryAdapterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.AppMetricaLibraryAdapterPigeon.subscribeForAutoCollectedData", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                try {
                  api.subscribeForAutoCollectedData(apiKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class ReporterPigeonCodec extends StandardMessageCodec {
    public static final ReporterPigeonCodec INSTANCE = new ReporterPigeonCodec();

    private ReporterPigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return AdRevenuePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return ECommerceAmountPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return ECommerceAmountPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ECommerceCartItemPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return ECommerceEventPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return ECommerceOrderPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return ECommercePricePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return ECommercePricePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return ECommerceProductPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return ECommerceProductPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return ECommerceReferrerPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return ECommerceScreenPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return ErrorDetailsPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return ErrorDetailsPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return ReceiptPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return RevenuePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return StackTraceElementPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 145:
          return UserProfileAttributePigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 146:
          return UserProfilePigeon.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof AdRevenuePigeon) {
        stream.write(128);
        writeValue(stream, ((AdRevenuePigeon) value).toList());
      } else if (value instanceof ECommerceAmountPigeon) {
        stream.write(129);
        writeValue(stream, ((ECommerceAmountPigeon) value).toList());
      } else if (value instanceof ECommerceAmountPigeon) {
        stream.write(130);
        writeValue(stream, ((ECommerceAmountPigeon) value).toList());
      } else if (value instanceof ECommerceCartItemPigeon) {
        stream.write(131);
        writeValue(stream, ((ECommerceCartItemPigeon) value).toList());
      } else if (value instanceof ECommerceEventPigeon) {
        stream.write(132);
        writeValue(stream, ((ECommerceEventPigeon) value).toList());
      } else if (value instanceof ECommerceOrderPigeon) {
        stream.write(133);
        writeValue(stream, ((ECommerceOrderPigeon) value).toList());
      } else if (value instanceof ECommercePricePigeon) {
        stream.write(134);
        writeValue(stream, ((ECommercePricePigeon) value).toList());
      } else if (value instanceof ECommercePricePigeon) {
        stream.write(135);
        writeValue(stream, ((ECommercePricePigeon) value).toList());
      } else if (value instanceof ECommerceProductPigeon) {
        stream.write(136);
        writeValue(stream, ((ECommerceProductPigeon) value).toList());
      } else if (value instanceof ECommerceProductPigeon) {
        stream.write(137);
        writeValue(stream, ((ECommerceProductPigeon) value).toList());
      } else if (value instanceof ECommerceReferrerPigeon) {
        stream.write(138);
        writeValue(stream, ((ECommerceReferrerPigeon) value).toList());
      } else if (value instanceof ECommerceScreenPigeon) {
        stream.write(139);
        writeValue(stream, ((ECommerceScreenPigeon) value).toList());
      } else if (value instanceof ErrorDetailsPigeon) {
        stream.write(140);
        writeValue(stream, ((ErrorDetailsPigeon) value).toList());
      } else if (value instanceof ErrorDetailsPigeon) {
        stream.write(141);
        writeValue(stream, ((ErrorDetailsPigeon) value).toList());
      } else if (value instanceof ReceiptPigeon) {
        stream.write(142);
        writeValue(stream, ((ReceiptPigeon) value).toList());
      } else if (value instanceof RevenuePigeon) {
        stream.write(143);
        writeValue(stream, ((RevenuePigeon) value).toList());
      } else if (value instanceof StackTraceElementPigeon) {
        stream.write(144);
        writeValue(stream, ((StackTraceElementPigeon) value).toList());
      } else if (value instanceof UserProfileAttributePigeon) {
        stream.write(145);
        writeValue(stream, ((UserProfileAttributePigeon) value).toList());
      } else if (value instanceof UserProfilePigeon) {
        stream.write(146);
        writeValue(stream, ((UserProfilePigeon) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface ReporterPigeon {

    void clearAppEnvironment(@NonNull String apiKey);

    void pauseSession(@NonNull String apiKey);

    void putAppEnvironmentValue(@NonNull String apiKey, @NonNull String key, @Nullable String value);

    void reportAdRevenue(@NonNull String apiKey, @NonNull AdRevenuePigeon adRevenue);

    void reportECommerce(@NonNull String apiKey, @NonNull ECommerceEventPigeon event);

    void reportError(@NonNull String apiKey, @NonNull ErrorDetailsPigeon error, @Nullable String message);

    void reportErrorWithGroup(@NonNull String apiKey, @NonNull String groupId, @Nullable ErrorDetailsPigeon error, @Nullable String message);

    void reportEvent(@NonNull String apiKey, @NonNull String eventName);

    void reportEventWithJson(@NonNull String apiKey, @NonNull String eventName, @Nullable String attributesJson);

    void reportRevenue(@NonNull String apiKey, @NonNull RevenuePigeon revenue);

    void reportUnhandledException(@NonNull String apiKey, @NonNull ErrorDetailsPigeon error);

    void reportUserProfile(@NonNull String apiKey, @NonNull UserProfilePigeon userProfile);

    void resumeSession(@NonNull String apiKey);

    void sendEventsBuffer(@NonNull String apiKey);

    void setDataSendingEnabled(@NonNull String apiKey, @NonNull Boolean enabled);

    void setUserProfileID(@NonNull String apiKey, @Nullable String userProfileID);

    /** The codec used by ReporterPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return ReporterPigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `ReporterPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable ReporterPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.clearAppEnvironment", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                try {
                  api.clearAppEnvironment(apiKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.pauseSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                try {
                  api.pauseSession(apiKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.putAppEnvironmentValue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                String keyArg = (String) args.get(1);
                String valueArg = (String) args.get(2);
                try {
                  api.putAppEnvironmentValue(apiKeyArg, keyArg, valueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportAdRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                AdRevenuePigeon adRevenueArg = (AdRevenuePigeon) args.get(1);
                try {
                  api.reportAdRevenue(apiKeyArg, adRevenueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportECommerce", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                ECommerceEventPigeon eventArg = (ECommerceEventPigeon) args.get(1);
                try {
                  api.reportECommerce(apiKeyArg, eventArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportError", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon) args.get(1);
                String messageArg = (String) args.get(2);
                try {
                  api.reportError(apiKeyArg, errorArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportErrorWithGroup", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                String groupIdArg = (String) args.get(1);
                ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon) args.get(2);
                String messageArg = (String) args.get(3);
                try {
                  api.reportErrorWithGroup(apiKeyArg, groupIdArg, errorArg, messageArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportEvent", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                String eventNameArg = (String) args.get(1);
                try {
                  api.reportEvent(apiKeyArg, eventNameArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportEventWithJson", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                String eventNameArg = (String) args.get(1);
                String attributesJsonArg = (String) args.get(2);
                try {
                  api.reportEventWithJson(apiKeyArg, eventNameArg, attributesJsonArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportRevenue", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                RevenuePigeon revenueArg = (RevenuePigeon) args.get(1);
                try {
                  api.reportRevenue(apiKeyArg, revenueArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportUnhandledException", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                ErrorDetailsPigeon errorArg = (ErrorDetailsPigeon) args.get(1);
                try {
                  api.reportUnhandledException(apiKeyArg, errorArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportUserProfile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                UserProfilePigeon userProfileArg = (UserProfilePigeon) args.get(1);
                try {
                  api.reportUserProfile(apiKeyArg, userProfileArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.resumeSession", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                try {
                  api.resumeSession(apiKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.sendEventsBuffer", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                try {
                  api.sendEventsBuffer(apiKeyArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.setDataSendingEnabled", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                Boolean enabledArg = (Boolean) args.get(1);
                try {
                  api.setDataSendingEnabled(apiKeyArg, enabledArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.setUserProfileID", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String apiKeyArg = (String) args.get(0);
                String userProfileIDArg = (String) args.get(1);
                try {
                  api.setUserProfileID(apiKeyArg, userProfileIDArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface InitialDeepLinkHolderPigeon {

    @Nullable 
    String getInitialDeeplink();

    /** The codec used by InitialDeepLinkHolderPigeon. */
    static @NonNull MessageCodec<Object> getCodec() {
      return new StandardMessageCodec();
    }
    /**Sets up an instance of `InitialDeepLinkHolderPigeon` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable InitialDeepLinkHolderPigeon api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.appmetrica_plugin.InitialDeepLinkHolderPigeon.getInitialDeeplink", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                try {
                  String output = api.getInitialDeeplink();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
