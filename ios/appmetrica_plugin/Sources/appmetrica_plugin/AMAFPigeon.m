// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "AMAFPigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface AMAFAppMetricaConfigPigeon ()
+ (AMAFAppMetricaConfigPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFAppMetricaConfigPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFLocationPigeon ()
+ (AMAFLocationPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFLocationPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFPreloadInfoPigeon ()
+ (AMAFPreloadInfoPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFPreloadInfoPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFAppMetricaDeferredDeeplinkErrorPigeon ()
+ (AMAFAppMetricaDeferredDeeplinkErrorPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFAppMetricaDeferredDeeplinkErrorPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFAppMetricaDeferredDeeplinkPigeon ()
+ (AMAFAppMetricaDeferredDeeplinkPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFAppMetricaDeferredDeeplinkPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFAppMetricaDeferredDeeplinkParametersPigeon ()
+ (AMAFAppMetricaDeferredDeeplinkParametersPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFAppMetricaDeferredDeeplinkParametersPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFRevenuePigeon ()
+ (AMAFRevenuePigeon *)fromList:(NSArray *)list;
+ (nullable AMAFRevenuePigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFReceiptPigeon ()
+ (AMAFReceiptPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFReceiptPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceAmountPigeon ()
+ (AMAFECommerceAmountPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceAmountPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceProductPigeon ()
+ (AMAFECommerceProductPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceProductPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommercePricePigeon ()
+ (AMAFECommercePricePigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommercePricePigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceReferrerPigeon ()
+ (AMAFECommerceReferrerPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceReferrerPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceScreenPigeon ()
+ (AMAFECommerceScreenPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceScreenPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceCartItemPigeon ()
+ (AMAFECommerceCartItemPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceCartItemPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceOrderPigeon ()
+ (AMAFECommerceOrderPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceOrderPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFECommerceEventPigeon ()
+ (AMAFECommerceEventPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFECommerceEventPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFStackTraceElementPigeon ()
+ (AMAFStackTraceElementPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFStackTraceElementPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFErrorDetailsPigeon ()
+ (AMAFErrorDetailsPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFErrorDetailsPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFUserProfileAttributePigeon ()
+ (AMAFUserProfileAttributePigeon *)fromList:(NSArray *)list;
+ (nullable AMAFUserProfileAttributePigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFUserProfilePigeon ()
+ (AMAFUserProfilePigeon *)fromList:(NSArray *)list;
+ (nullable AMAFUserProfilePigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFAdRevenuePigeon ()
+ (AMAFAdRevenuePigeon *)fromList:(NSArray *)list;
+ (nullable AMAFAdRevenuePigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFStartupParamsItemPigeon ()
+ (AMAFStartupParamsItemPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFStartupParamsItemPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFStartupParamsResultPigeon ()
+ (AMAFStartupParamsResultPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFStartupParamsResultPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFStartupParamsReasonPigeon ()
+ (AMAFStartupParamsReasonPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFStartupParamsReasonPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFStartupParamsPigeon ()
+ (AMAFStartupParamsPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFStartupParamsPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFExternalAttributionPigeon ()
+ (AMAFExternalAttributionPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFExternalAttributionPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@interface AMAFReporterConfigPigeon ()
+ (AMAFReporterConfigPigeon *)fromList:(NSArray *)list;
+ (nullable AMAFReporterConfigPigeon *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation AMAFAppMetricaConfigPigeon
+ (instancetype)makeWithApiKey:(NSString *)apiKey
    anrMonitoring:(nullable NSNumber *)anrMonitoring
    anrMonitoringTimeout:(nullable NSNumber *)anrMonitoringTimeout
    appBuildNumber:(nullable NSNumber *)appBuildNumber
    appEnvironment:(nullable NSDictionary<NSString *, NSString *> *)appEnvironment
    appOpenTrackingEnabled:(nullable NSNumber *)appOpenTrackingEnabled
    appVersion:(nullable NSString *)appVersion
    crashReporting:(nullable NSNumber *)crashReporting
    customHosts:(nullable NSArray<NSString *> *)customHosts
    dataSendingEnabled:(nullable NSNumber *)dataSendingEnabled
    deviceType:(nullable NSString *)deviceType
    dispatchPeriodSeconds:(nullable NSNumber *)dispatchPeriodSeconds
    errorEnvironment:(nullable NSDictionary<NSString *, NSString *> *)errorEnvironment
    firstActivationAsUpdate:(nullable NSNumber *)firstActivationAsUpdate
    location:(nullable AMAFLocationPigeon *)location
    locationTracking:(nullable NSNumber *)locationTracking
    logs:(nullable NSNumber *)logs
    maxReportsCount:(nullable NSNumber *)maxReportsCount
    maxReportsInDatabaseCount:(nullable NSNumber *)maxReportsInDatabaseCount
    nativeCrashReporting:(nullable NSNumber *)nativeCrashReporting
    preloadInfo:(nullable AMAFPreloadInfoPigeon *)preloadInfo
    revenueAutoTrackingEnabled:(nullable NSNumber *)revenueAutoTrackingEnabled
    sessionTimeout:(nullable NSNumber *)sessionTimeout
    sessionsAutoTrackingEnabled:(nullable NSNumber *)sessionsAutoTrackingEnabled
    userProfileID:(nullable NSString *)userProfileID {
  AMAFAppMetricaConfigPigeon* pigeonResult = [[AMAFAppMetricaConfigPigeon alloc] init];
  pigeonResult.apiKey = apiKey;
  pigeonResult.anrMonitoring = anrMonitoring;
  pigeonResult.anrMonitoringTimeout = anrMonitoringTimeout;
  pigeonResult.appBuildNumber = appBuildNumber;
  pigeonResult.appEnvironment = appEnvironment;
  pigeonResult.appOpenTrackingEnabled = appOpenTrackingEnabled;
  pigeonResult.appVersion = appVersion;
  pigeonResult.crashReporting = crashReporting;
  pigeonResult.customHosts = customHosts;
  pigeonResult.dataSendingEnabled = dataSendingEnabled;
  pigeonResult.deviceType = deviceType;
  pigeonResult.dispatchPeriodSeconds = dispatchPeriodSeconds;
  pigeonResult.errorEnvironment = errorEnvironment;
  pigeonResult.firstActivationAsUpdate = firstActivationAsUpdate;
  pigeonResult.location = location;
  pigeonResult.locationTracking = locationTracking;
  pigeonResult.logs = logs;
  pigeonResult.maxReportsCount = maxReportsCount;
  pigeonResult.maxReportsInDatabaseCount = maxReportsInDatabaseCount;
  pigeonResult.nativeCrashReporting = nativeCrashReporting;
  pigeonResult.preloadInfo = preloadInfo;
  pigeonResult.revenueAutoTrackingEnabled = revenueAutoTrackingEnabled;
  pigeonResult.sessionTimeout = sessionTimeout;
  pigeonResult.sessionsAutoTrackingEnabled = sessionsAutoTrackingEnabled;
  pigeonResult.userProfileID = userProfileID;
  return pigeonResult;
}
+ (AMAFAppMetricaConfigPigeon *)fromList:(NSArray *)list {
  AMAFAppMetricaConfigPigeon *pigeonResult = [[AMAFAppMetricaConfigPigeon alloc] init];
  pigeonResult.apiKey = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.apiKey != nil, @"");
  pigeonResult.anrMonitoring = GetNullableObjectAtIndex(list, 1);
  pigeonResult.anrMonitoringTimeout = GetNullableObjectAtIndex(list, 2);
  pigeonResult.appBuildNumber = GetNullableObjectAtIndex(list, 3);
  pigeonResult.appEnvironment = GetNullableObjectAtIndex(list, 4);
  pigeonResult.appOpenTrackingEnabled = GetNullableObjectAtIndex(list, 5);
  pigeonResult.appVersion = GetNullableObjectAtIndex(list, 6);
  pigeonResult.crashReporting = GetNullableObjectAtIndex(list, 7);
  pigeonResult.customHosts = GetNullableObjectAtIndex(list, 8);
  pigeonResult.dataSendingEnabled = GetNullableObjectAtIndex(list, 9);
  pigeonResult.deviceType = GetNullableObjectAtIndex(list, 10);
  pigeonResult.dispatchPeriodSeconds = GetNullableObjectAtIndex(list, 11);
  pigeonResult.errorEnvironment = GetNullableObjectAtIndex(list, 12);
  pigeonResult.firstActivationAsUpdate = GetNullableObjectAtIndex(list, 13);
  pigeonResult.location = [AMAFLocationPigeon nullableFromList:(GetNullableObjectAtIndex(list, 14))];
  pigeonResult.locationTracking = GetNullableObjectAtIndex(list, 15);
  pigeonResult.logs = GetNullableObjectAtIndex(list, 16);
  pigeonResult.maxReportsCount = GetNullableObjectAtIndex(list, 17);
  pigeonResult.maxReportsInDatabaseCount = GetNullableObjectAtIndex(list, 18);
  pigeonResult.nativeCrashReporting = GetNullableObjectAtIndex(list, 19);
  pigeonResult.preloadInfo = [AMAFPreloadInfoPigeon nullableFromList:(GetNullableObjectAtIndex(list, 20))];
  pigeonResult.revenueAutoTrackingEnabled = GetNullableObjectAtIndex(list, 21);
  pigeonResult.sessionTimeout = GetNullableObjectAtIndex(list, 22);
  pigeonResult.sessionsAutoTrackingEnabled = GetNullableObjectAtIndex(list, 23);
  pigeonResult.userProfileID = GetNullableObjectAtIndex(list, 24);
  return pigeonResult;
}
+ (nullable AMAFAppMetricaConfigPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFAppMetricaConfigPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.apiKey ?: [NSNull null]),
    (self.anrMonitoring ?: [NSNull null]),
    (self.anrMonitoringTimeout ?: [NSNull null]),
    (self.appBuildNumber ?: [NSNull null]),
    (self.appEnvironment ?: [NSNull null]),
    (self.appOpenTrackingEnabled ?: [NSNull null]),
    (self.appVersion ?: [NSNull null]),
    (self.crashReporting ?: [NSNull null]),
    (self.customHosts ?: [NSNull null]),
    (self.dataSendingEnabled ?: [NSNull null]),
    (self.deviceType ?: [NSNull null]),
    (self.dispatchPeriodSeconds ?: [NSNull null]),
    (self.errorEnvironment ?: [NSNull null]),
    (self.firstActivationAsUpdate ?: [NSNull null]),
    (self.location ? [self.location toList] : [NSNull null]),
    (self.locationTracking ?: [NSNull null]),
    (self.logs ?: [NSNull null]),
    (self.maxReportsCount ?: [NSNull null]),
    (self.maxReportsInDatabaseCount ?: [NSNull null]),
    (self.nativeCrashReporting ?: [NSNull null]),
    (self.preloadInfo ? [self.preloadInfo toList] : [NSNull null]),
    (self.revenueAutoTrackingEnabled ?: [NSNull null]),
    (self.sessionTimeout ?: [NSNull null]),
    (self.sessionsAutoTrackingEnabled ?: [NSNull null]),
    (self.userProfileID ?: [NSNull null]),
  ];
}
@end

@implementation AMAFLocationPigeon
+ (instancetype)makeWithLatitude:(NSNumber *)latitude
    longitude:(NSNumber *)longitude
    provider:(nullable NSString *)provider
    altitude:(nullable NSNumber *)altitude
    accuracy:(nullable NSNumber *)accuracy
    course:(nullable NSNumber *)course
    speed:(nullable NSNumber *)speed
    timestamp:(nullable NSNumber *)timestamp {
  AMAFLocationPigeon* pigeonResult = [[AMAFLocationPigeon alloc] init];
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.provider = provider;
  pigeonResult.altitude = altitude;
  pigeonResult.accuracy = accuracy;
  pigeonResult.course = course;
  pigeonResult.speed = speed;
  pigeonResult.timestamp = timestamp;
  return pigeonResult;
}
+ (AMAFLocationPigeon *)fromList:(NSArray *)list {
  AMAFLocationPigeon *pigeonResult = [[AMAFLocationPigeon alloc] init];
  pigeonResult.latitude = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.latitude != nil, @"");
  pigeonResult.longitude = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.longitude != nil, @"");
  pigeonResult.provider = GetNullableObjectAtIndex(list, 2);
  pigeonResult.altitude = GetNullableObjectAtIndex(list, 3);
  pigeonResult.accuracy = GetNullableObjectAtIndex(list, 4);
  pigeonResult.course = GetNullableObjectAtIndex(list, 5);
  pigeonResult.speed = GetNullableObjectAtIndex(list, 6);
  pigeonResult.timestamp = GetNullableObjectAtIndex(list, 7);
  return pigeonResult;
}
+ (nullable AMAFLocationPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFLocationPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.latitude ?: [NSNull null]),
    (self.longitude ?: [NSNull null]),
    (self.provider ?: [NSNull null]),
    (self.altitude ?: [NSNull null]),
    (self.accuracy ?: [NSNull null]),
    (self.course ?: [NSNull null]),
    (self.speed ?: [NSNull null]),
    (self.timestamp ?: [NSNull null]),
  ];
}
@end

@implementation AMAFPreloadInfoPigeon
+ (instancetype)makeWithTrackingId:(NSString *)trackingId
    additionalInfo:(nullable NSDictionary<NSString *, NSString *> *)additionalInfo {
  AMAFPreloadInfoPigeon* pigeonResult = [[AMAFPreloadInfoPigeon alloc] init];
  pigeonResult.trackingId = trackingId;
  pigeonResult.additionalInfo = additionalInfo;
  return pigeonResult;
}
+ (AMAFPreloadInfoPigeon *)fromList:(NSArray *)list {
  AMAFPreloadInfoPigeon *pigeonResult = [[AMAFPreloadInfoPigeon alloc] init];
  pigeonResult.trackingId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.trackingId != nil, @"");
  pigeonResult.additionalInfo = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable AMAFPreloadInfoPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFPreloadInfoPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.trackingId ?: [NSNull null]),
    (self.additionalInfo ?: [NSNull null]),
  ];
}
@end

@implementation AMAFAppMetricaDeferredDeeplinkErrorPigeon
+ (instancetype)makeWithReason:(AMAFAppMetricaDeferredDeeplinkReasonPigeon)reason
    description:(NSString *)description
    message:(nullable NSString *)message {
  AMAFAppMetricaDeferredDeeplinkErrorPigeon* pigeonResult = [[AMAFAppMetricaDeferredDeeplinkErrorPigeon alloc] init];
  pigeonResult.reason = reason;
  pigeonResult.description = description;
  pigeonResult.message = message;
  return pigeonResult;
}
+ (AMAFAppMetricaDeferredDeeplinkErrorPigeon *)fromList:(NSArray *)list {
  AMAFAppMetricaDeferredDeeplinkErrorPigeon *pigeonResult = [[AMAFAppMetricaDeferredDeeplinkErrorPigeon alloc] init];
  pigeonResult.reason = [GetNullableObjectAtIndex(list, 0) integerValue];
  pigeonResult.description = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.description != nil, @"");
  pigeonResult.message = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable AMAFAppMetricaDeferredDeeplinkErrorPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFAppMetricaDeferredDeeplinkErrorPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    @(self.reason),
    (self.description ?: [NSNull null]),
    (self.message ?: [NSNull null]),
  ];
}
@end

@implementation AMAFAppMetricaDeferredDeeplinkPigeon
+ (instancetype)makeWithDeeplink:(nullable NSString *)deeplink
    error:(nullable AMAFAppMetricaDeferredDeeplinkErrorPigeon *)error {
  AMAFAppMetricaDeferredDeeplinkPigeon* pigeonResult = [[AMAFAppMetricaDeferredDeeplinkPigeon alloc] init];
  pigeonResult.deeplink = deeplink;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (AMAFAppMetricaDeferredDeeplinkPigeon *)fromList:(NSArray *)list {
  AMAFAppMetricaDeferredDeeplinkPigeon *pigeonResult = [[AMAFAppMetricaDeferredDeeplinkPigeon alloc] init];
  pigeonResult.deeplink = GetNullableObjectAtIndex(list, 0);
  pigeonResult.error = [AMAFAppMetricaDeferredDeeplinkErrorPigeon nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable AMAFAppMetricaDeferredDeeplinkPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFAppMetricaDeferredDeeplinkPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.deeplink ?: [NSNull null]),
    (self.error ? [self.error toList] : [NSNull null]),
  ];
}
@end

@implementation AMAFAppMetricaDeferredDeeplinkParametersPigeon
+ (instancetype)makeWithParameters:(nullable NSDictionary<NSString *, NSString *> *)parameters
    error:(nullable AMAFAppMetricaDeferredDeeplinkErrorPigeon *)error {
  AMAFAppMetricaDeferredDeeplinkParametersPigeon* pigeonResult = [[AMAFAppMetricaDeferredDeeplinkParametersPigeon alloc] init];
  pigeonResult.parameters = parameters;
  pigeonResult.error = error;
  return pigeonResult;
}
+ (AMAFAppMetricaDeferredDeeplinkParametersPigeon *)fromList:(NSArray *)list {
  AMAFAppMetricaDeferredDeeplinkParametersPigeon *pigeonResult = [[AMAFAppMetricaDeferredDeeplinkParametersPigeon alloc] init];
  pigeonResult.parameters = GetNullableObjectAtIndex(list, 0);
  pigeonResult.error = [AMAFAppMetricaDeferredDeeplinkErrorPigeon nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable AMAFAppMetricaDeferredDeeplinkParametersPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFAppMetricaDeferredDeeplinkParametersPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.parameters ?: [NSNull null]),
    (self.error ? [self.error toList] : [NSNull null]),
  ];
}
@end

@implementation AMAFRevenuePigeon
+ (instancetype)makeWithPrice:(NSString *)price
    currency:(NSString *)currency
    quantity:(nullable NSNumber *)quantity
    productId:(nullable NSString *)productId
    payload:(nullable NSString *)payload
    receipt:(nullable AMAFReceiptPigeon *)receipt
    transactionId:(nullable NSString *)transactionId {
  AMAFRevenuePigeon* pigeonResult = [[AMAFRevenuePigeon alloc] init];
  pigeonResult.price = price;
  pigeonResult.currency = currency;
  pigeonResult.quantity = quantity;
  pigeonResult.productId = productId;
  pigeonResult.payload = payload;
  pigeonResult.receipt = receipt;
  pigeonResult.transactionId = transactionId;
  return pigeonResult;
}
+ (AMAFRevenuePigeon *)fromList:(NSArray *)list {
  AMAFRevenuePigeon *pigeonResult = [[AMAFRevenuePigeon alloc] init];
  pigeonResult.price = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.price != nil, @"");
  pigeonResult.currency = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.currency != nil, @"");
  pigeonResult.quantity = GetNullableObjectAtIndex(list, 2);
  pigeonResult.productId = GetNullableObjectAtIndex(list, 3);
  pigeonResult.payload = GetNullableObjectAtIndex(list, 4);
  pigeonResult.receipt = [AMAFReceiptPigeon nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  pigeonResult.transactionId = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable AMAFRevenuePigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFRevenuePigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.price ?: [NSNull null]),
    (self.currency ?: [NSNull null]),
    (self.quantity ?: [NSNull null]),
    (self.productId ?: [NSNull null]),
    (self.payload ?: [NSNull null]),
    (self.receipt ? [self.receipt toList] : [NSNull null]),
    (self.transactionId ?: [NSNull null]),
  ];
}
@end

@implementation AMAFReceiptPigeon
+ (instancetype)makeWithData:(nullable NSString *)data
    signature:(nullable NSString *)signature {
  AMAFReceiptPigeon* pigeonResult = [[AMAFReceiptPigeon alloc] init];
  pigeonResult.data = data;
  pigeonResult.signature = signature;
  return pigeonResult;
}
+ (AMAFReceiptPigeon *)fromList:(NSArray *)list {
  AMAFReceiptPigeon *pigeonResult = [[AMAFReceiptPigeon alloc] init];
  pigeonResult.data = GetNullableObjectAtIndex(list, 0);
  pigeonResult.signature = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable AMAFReceiptPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFReceiptPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.data ?: [NSNull null]),
    (self.signature ?: [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceAmountPigeon
+ (instancetype)makeWithAmount:(NSString *)amount
    currency:(NSString *)currency {
  AMAFECommerceAmountPigeon* pigeonResult = [[AMAFECommerceAmountPigeon alloc] init];
  pigeonResult.amount = amount;
  pigeonResult.currency = currency;
  return pigeonResult;
}
+ (AMAFECommerceAmountPigeon *)fromList:(NSArray *)list {
  AMAFECommerceAmountPigeon *pigeonResult = [[AMAFECommerceAmountPigeon alloc] init];
  pigeonResult.amount = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.amount != nil, @"");
  pigeonResult.currency = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.currency != nil, @"");
  return pigeonResult;
}
+ (nullable AMAFECommerceAmountPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceAmountPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.amount ?: [NSNull null]),
    (self.currency ?: [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceProductPigeon
+ (instancetype)makeWithSku:(NSString *)sku
    name:(nullable NSString *)name
    categoriesPath:(nullable NSArray<NSString *> *)categoriesPath
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload
    actualPrice:(nullable AMAFECommercePricePigeon *)actualPrice
    originalPrice:(nullable AMAFECommercePricePigeon *)originalPrice
    promocodes:(nullable NSArray<NSString *> *)promocodes {
  AMAFECommerceProductPigeon* pigeonResult = [[AMAFECommerceProductPigeon alloc] init];
  pigeonResult.sku = sku;
  pigeonResult.name = name;
  pigeonResult.categoriesPath = categoriesPath;
  pigeonResult.payload = payload;
  pigeonResult.actualPrice = actualPrice;
  pigeonResult.originalPrice = originalPrice;
  pigeonResult.promocodes = promocodes;
  return pigeonResult;
}
+ (AMAFECommerceProductPigeon *)fromList:(NSArray *)list {
  AMAFECommerceProductPigeon *pigeonResult = [[AMAFECommerceProductPigeon alloc] init];
  pigeonResult.sku = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.sku != nil, @"");
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.categoriesPath = GetNullableObjectAtIndex(list, 2);
  pigeonResult.payload = GetNullableObjectAtIndex(list, 3);
  pigeonResult.actualPrice = [AMAFECommercePricePigeon nullableFromList:(GetNullableObjectAtIndex(list, 4))];
  pigeonResult.originalPrice = [AMAFECommercePricePigeon nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  pigeonResult.promocodes = GetNullableObjectAtIndex(list, 6);
  return pigeonResult;
}
+ (nullable AMAFECommerceProductPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceProductPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.sku ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.categoriesPath ?: [NSNull null]),
    (self.payload ?: [NSNull null]),
    (self.actualPrice ? [self.actualPrice toList] : [NSNull null]),
    (self.originalPrice ? [self.originalPrice toList] : [NSNull null]),
    (self.promocodes ?: [NSNull null]),
  ];
}
@end

@implementation AMAFECommercePricePigeon
+ (instancetype)makeWithFiat:(AMAFECommerceAmountPigeon *)fiat
    internalComponents:(nullable NSArray<AMAFECommerceAmountPigeon *> *)internalComponents {
  AMAFECommercePricePigeon* pigeonResult = [[AMAFECommercePricePigeon alloc] init];
  pigeonResult.fiat = fiat;
  pigeonResult.internalComponents = internalComponents;
  return pigeonResult;
}
+ (AMAFECommercePricePigeon *)fromList:(NSArray *)list {
  AMAFECommercePricePigeon *pigeonResult = [[AMAFECommercePricePigeon alloc] init];
  pigeonResult.fiat = [AMAFECommerceAmountPigeon nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.fiat != nil, @"");
  pigeonResult.internalComponents = GetNullableObjectAtIndex(list, 1);
  return pigeonResult;
}
+ (nullable AMAFECommercePricePigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommercePricePigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.fiat ? [self.fiat toList] : [NSNull null]),
    (self.internalComponents ?: [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceReferrerPigeon
+ (instancetype)makeWithType:(nullable NSString *)type
    identifier:(nullable NSString *)identifier
    screen:(nullable AMAFECommerceScreenPigeon *)screen {
  AMAFECommerceReferrerPigeon* pigeonResult = [[AMAFECommerceReferrerPigeon alloc] init];
  pigeonResult.type = type;
  pigeonResult.identifier = identifier;
  pigeonResult.screen = screen;
  return pigeonResult;
}
+ (AMAFECommerceReferrerPigeon *)fromList:(NSArray *)list {
  AMAFECommerceReferrerPigeon *pigeonResult = [[AMAFECommerceReferrerPigeon alloc] init];
  pigeonResult.type = GetNullableObjectAtIndex(list, 0);
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 1);
  pigeonResult.screen = [AMAFECommerceScreenPigeon nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  return pigeonResult;
}
+ (nullable AMAFECommerceReferrerPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceReferrerPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.type ?: [NSNull null]),
    (self.identifier ?: [NSNull null]),
    (self.screen ? [self.screen toList] : [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceScreenPigeon
+ (instancetype)makeWithName:(nullable NSString *)name
    categoriesPath:(nullable NSArray<NSString *> *)categoriesPath
    searchQuery:(nullable NSString *)searchQuery
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload {
  AMAFECommerceScreenPigeon* pigeonResult = [[AMAFECommerceScreenPigeon alloc] init];
  pigeonResult.name = name;
  pigeonResult.categoriesPath = categoriesPath;
  pigeonResult.searchQuery = searchQuery;
  pigeonResult.payload = payload;
  return pigeonResult;
}
+ (AMAFECommerceScreenPigeon *)fromList:(NSArray *)list {
  AMAFECommerceScreenPigeon *pigeonResult = [[AMAFECommerceScreenPigeon alloc] init];
  pigeonResult.name = GetNullableObjectAtIndex(list, 0);
  pigeonResult.categoriesPath = GetNullableObjectAtIndex(list, 1);
  pigeonResult.searchQuery = GetNullableObjectAtIndex(list, 2);
  pigeonResult.payload = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable AMAFECommerceScreenPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceScreenPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.name ?: [NSNull null]),
    (self.categoriesPath ?: [NSNull null]),
    (self.searchQuery ?: [NSNull null]),
    (self.payload ?: [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceCartItemPigeon
+ (instancetype)makeWithProduct:(AMAFECommerceProductPigeon *)product
    quantity:(NSString *)quantity
    revenue:(AMAFECommercePricePigeon *)revenue
    referrer:(nullable AMAFECommerceReferrerPigeon *)referrer {
  AMAFECommerceCartItemPigeon* pigeonResult = [[AMAFECommerceCartItemPigeon alloc] init];
  pigeonResult.product = product;
  pigeonResult.quantity = quantity;
  pigeonResult.revenue = revenue;
  pigeonResult.referrer = referrer;
  return pigeonResult;
}
+ (AMAFECommerceCartItemPigeon *)fromList:(NSArray *)list {
  AMAFECommerceCartItemPigeon *pigeonResult = [[AMAFECommerceCartItemPigeon alloc] init];
  pigeonResult.product = [AMAFECommerceProductPigeon nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  NSAssert(pigeonResult.product != nil, @"");
  pigeonResult.quantity = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.quantity != nil, @"");
  pigeonResult.revenue = [AMAFECommercePricePigeon nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  NSAssert(pigeonResult.revenue != nil, @"");
  pigeonResult.referrer = [AMAFECommerceReferrerPigeon nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  return pigeonResult;
}
+ (nullable AMAFECommerceCartItemPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceCartItemPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.product ? [self.product toList] : [NSNull null]),
    (self.quantity ?: [NSNull null]),
    (self.revenue ? [self.revenue toList] : [NSNull null]),
    (self.referrer ? [self.referrer toList] : [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceOrderPigeon
+ (instancetype)makeWithIdentifier:(NSString *)identifier
    items:(NSArray<AMAFECommerceCartItemPigeon *> *)items
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload {
  AMAFECommerceOrderPigeon* pigeonResult = [[AMAFECommerceOrderPigeon alloc] init];
  pigeonResult.identifier = identifier;
  pigeonResult.items = items;
  pigeonResult.payload = payload;
  return pigeonResult;
}
+ (AMAFECommerceOrderPigeon *)fromList:(NSArray *)list {
  AMAFECommerceOrderPigeon *pigeonResult = [[AMAFECommerceOrderPigeon alloc] init];
  pigeonResult.identifier = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.identifier != nil, @"");
  pigeonResult.items = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.items != nil, @"");
  pigeonResult.payload = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable AMAFECommerceOrderPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceOrderPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.identifier ?: [NSNull null]),
    (self.items ?: [NSNull null]),
    (self.payload ?: [NSNull null]),
  ];
}
@end

@implementation AMAFECommerceEventPigeon
+ (instancetype)makeWithEventType:(NSString *)eventType
    cartItem:(nullable AMAFECommerceCartItemPigeon *)cartItem
    order:(nullable AMAFECommerceOrderPigeon *)order
    product:(nullable AMAFECommerceProductPigeon *)product
    referrer:(nullable AMAFECommerceReferrerPigeon *)referrer
    screen:(nullable AMAFECommerceScreenPigeon *)screen {
  AMAFECommerceEventPigeon* pigeonResult = [[AMAFECommerceEventPigeon alloc] init];
  pigeonResult.eventType = eventType;
  pigeonResult.cartItem = cartItem;
  pigeonResult.order = order;
  pigeonResult.product = product;
  pigeonResult.referrer = referrer;
  pigeonResult.screen = screen;
  return pigeonResult;
}
+ (AMAFECommerceEventPigeon *)fromList:(NSArray *)list {
  AMAFECommerceEventPigeon *pigeonResult = [[AMAFECommerceEventPigeon alloc] init];
  pigeonResult.eventType = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.eventType != nil, @"");
  pigeonResult.cartItem = [AMAFECommerceCartItemPigeon nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  pigeonResult.order = [AMAFECommerceOrderPigeon nullableFromList:(GetNullableObjectAtIndex(list, 2))];
  pigeonResult.product = [AMAFECommerceProductPigeon nullableFromList:(GetNullableObjectAtIndex(list, 3))];
  pigeonResult.referrer = [AMAFECommerceReferrerPigeon nullableFromList:(GetNullableObjectAtIndex(list, 4))];
  pigeonResult.screen = [AMAFECommerceScreenPigeon nullableFromList:(GetNullableObjectAtIndex(list, 5))];
  return pigeonResult;
}
+ (nullable AMAFECommerceEventPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFECommerceEventPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.eventType ?: [NSNull null]),
    (self.cartItem ? [self.cartItem toList] : [NSNull null]),
    (self.order ? [self.order toList] : [NSNull null]),
    (self.product ? [self.product toList] : [NSNull null]),
    (self.referrer ? [self.referrer toList] : [NSNull null]),
    (self.screen ? [self.screen toList] : [NSNull null]),
  ];
}
@end

@implementation AMAFStackTraceElementPigeon
+ (instancetype)makeWithClassName:(NSString *)className
    fileName:(nullable NSString *)fileName
    line:(NSNumber *)line
    column:(NSNumber *)column
    methodName:(NSString *)methodName {
  AMAFStackTraceElementPigeon* pigeonResult = [[AMAFStackTraceElementPigeon alloc] init];
  pigeonResult.className = className;
  pigeonResult.fileName = fileName;
  pigeonResult.line = line;
  pigeonResult.column = column;
  pigeonResult.methodName = methodName;
  return pigeonResult;
}
+ (AMAFStackTraceElementPigeon *)fromList:(NSArray *)list {
  AMAFStackTraceElementPigeon *pigeonResult = [[AMAFStackTraceElementPigeon alloc] init];
  pigeonResult.className = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.className != nil, @"");
  pigeonResult.fileName = GetNullableObjectAtIndex(list, 1);
  pigeonResult.line = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.line != nil, @"");
  pigeonResult.column = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.column != nil, @"");
  pigeonResult.methodName = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.methodName != nil, @"");
  return pigeonResult;
}
+ (nullable AMAFStackTraceElementPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFStackTraceElementPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.className ?: [NSNull null]),
    (self.fileName ?: [NSNull null]),
    (self.line ?: [NSNull null]),
    (self.column ?: [NSNull null]),
    (self.methodName ?: [NSNull null]),
  ];
}
@end

@implementation AMAFErrorDetailsPigeon
+ (instancetype)makeWithExceptionClass:(NSString *)exceptionClass
    message:(nullable NSString *)message
    dartVersion:(NSString *)dartVersion
    backtrace:(nullable NSArray<AMAFStackTraceElementPigeon *> *)backtrace {
  AMAFErrorDetailsPigeon* pigeonResult = [[AMAFErrorDetailsPigeon alloc] init];
  pigeonResult.exceptionClass = exceptionClass;
  pigeonResult.message = message;
  pigeonResult.dartVersion = dartVersion;
  pigeonResult.backtrace = backtrace;
  return pigeonResult;
}
+ (AMAFErrorDetailsPigeon *)fromList:(NSArray *)list {
  AMAFErrorDetailsPigeon *pigeonResult = [[AMAFErrorDetailsPigeon alloc] init];
  pigeonResult.exceptionClass = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.exceptionClass != nil, @"");
  pigeonResult.message = GetNullableObjectAtIndex(list, 1);
  pigeonResult.dartVersion = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.dartVersion != nil, @"");
  pigeonResult.backtrace = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable AMAFErrorDetailsPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFErrorDetailsPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.exceptionClass ?: [NSNull null]),
    (self.message ?: [NSNull null]),
    (self.dartVersion ?: [NSNull null]),
    (self.backtrace ?: [NSNull null]),
  ];
}
@end

@implementation AMAFUserProfileAttributePigeon
+ (instancetype)makeWithKey:(NSString *)key
    doubleValue:(nullable NSNumber *)doubleValue
    stringValue:(nullable NSString *)stringValue
    boolValue:(nullable NSNumber *)boolValue
    year:(nullable NSNumber *)year
    month:(nullable NSNumber *)month
    day:(nullable NSNumber *)day
    age:(nullable NSNumber *)age
    genderValue:(AMAFGenderPigeon)genderValue
    ifUndefined:(nullable NSNumber *)ifUndefined
    reset:(nullable NSNumber *)reset
    type:(AMAFUserProfileAttributeType)type {
  AMAFUserProfileAttributePigeon* pigeonResult = [[AMAFUserProfileAttributePigeon alloc] init];
  pigeonResult.key = key;
  pigeonResult.doubleValue = doubleValue;
  pigeonResult.stringValue = stringValue;
  pigeonResult.boolValue = boolValue;
  pigeonResult.year = year;
  pigeonResult.month = month;
  pigeonResult.day = day;
  pigeonResult.age = age;
  pigeonResult.genderValue = genderValue;
  pigeonResult.ifUndefined = ifUndefined;
  pigeonResult.reset = reset;
  pigeonResult.type = type;
  return pigeonResult;
}
+ (AMAFUserProfileAttributePigeon *)fromList:(NSArray *)list {
  AMAFUserProfileAttributePigeon *pigeonResult = [[AMAFUserProfileAttributePigeon alloc] init];
  pigeonResult.key = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.key != nil, @"");
  pigeonResult.doubleValue = GetNullableObjectAtIndex(list, 1);
  pigeonResult.stringValue = GetNullableObjectAtIndex(list, 2);
  pigeonResult.boolValue = GetNullableObjectAtIndex(list, 3);
  pigeonResult.year = GetNullableObjectAtIndex(list, 4);
  pigeonResult.month = GetNullableObjectAtIndex(list, 5);
  pigeonResult.day = GetNullableObjectAtIndex(list, 6);
  pigeonResult.age = GetNullableObjectAtIndex(list, 7);
  pigeonResult.genderValue = [GetNullableObjectAtIndex(list, 8) integerValue];
  pigeonResult.ifUndefined = GetNullableObjectAtIndex(list, 9);
  pigeonResult.reset = GetNullableObjectAtIndex(list, 10);
  pigeonResult.type = [GetNullableObjectAtIndex(list, 11) integerValue];
  return pigeonResult;
}
+ (nullable AMAFUserProfileAttributePigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFUserProfileAttributePigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.key ?: [NSNull null]),
    (self.doubleValue ?: [NSNull null]),
    (self.stringValue ?: [NSNull null]),
    (self.boolValue ?: [NSNull null]),
    (self.year ?: [NSNull null]),
    (self.month ?: [NSNull null]),
    (self.day ?: [NSNull null]),
    (self.age ?: [NSNull null]),
    @(self.genderValue),
    (self.ifUndefined ?: [NSNull null]),
    (self.reset ?: [NSNull null]),
    @(self.type),
  ];
}
@end

@implementation AMAFUserProfilePigeon
+ (instancetype)makeWithAttributes:(NSArray<AMAFUserProfileAttributePigeon *> *)attributes {
  AMAFUserProfilePigeon* pigeonResult = [[AMAFUserProfilePigeon alloc] init];
  pigeonResult.attributes = attributes;
  return pigeonResult;
}
+ (AMAFUserProfilePigeon *)fromList:(NSArray *)list {
  AMAFUserProfilePigeon *pigeonResult = [[AMAFUserProfilePigeon alloc] init];
  pigeonResult.attributes = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.attributes != nil, @"");
  return pigeonResult;
}
+ (nullable AMAFUserProfilePigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFUserProfilePigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.attributes ?: [NSNull null]),
  ];
}
@end

@implementation AMAFAdRevenuePigeon
+ (instancetype)makeWithAdRevenue:(NSString *)adRevenue
    currency:(NSString *)currency
    adType:(AMAFAdTypePigeon)adType
    adNetwork:(nullable NSString *)adNetwork
    adUnitId:(nullable NSString *)adUnitId
    adUnitName:(nullable NSString *)adUnitName
    adPlacementId:(nullable NSString *)adPlacementId
    adPlacementName:(nullable NSString *)adPlacementName
    precision:(nullable NSString *)precision
    payload:(nullable NSDictionary<NSString *, NSString *> *)payload {
  AMAFAdRevenuePigeon* pigeonResult = [[AMAFAdRevenuePigeon alloc] init];
  pigeonResult.adRevenue = adRevenue;
  pigeonResult.currency = currency;
  pigeonResult.adType = adType;
  pigeonResult.adNetwork = adNetwork;
  pigeonResult.adUnitId = adUnitId;
  pigeonResult.adUnitName = adUnitName;
  pigeonResult.adPlacementId = adPlacementId;
  pigeonResult.adPlacementName = adPlacementName;
  pigeonResult.precision = precision;
  pigeonResult.payload = payload;
  return pigeonResult;
}
+ (AMAFAdRevenuePigeon *)fromList:(NSArray *)list {
  AMAFAdRevenuePigeon *pigeonResult = [[AMAFAdRevenuePigeon alloc] init];
  pigeonResult.adRevenue = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.adRevenue != nil, @"");
  pigeonResult.currency = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.currency != nil, @"");
  pigeonResult.adType = [GetNullableObjectAtIndex(list, 2) integerValue];
  pigeonResult.adNetwork = GetNullableObjectAtIndex(list, 3);
  pigeonResult.adUnitId = GetNullableObjectAtIndex(list, 4);
  pigeonResult.adUnitName = GetNullableObjectAtIndex(list, 5);
  pigeonResult.adPlacementId = GetNullableObjectAtIndex(list, 6);
  pigeonResult.adPlacementName = GetNullableObjectAtIndex(list, 7);
  pigeonResult.precision = GetNullableObjectAtIndex(list, 8);
  pigeonResult.payload = GetNullableObjectAtIndex(list, 9);
  return pigeonResult;
}
+ (nullable AMAFAdRevenuePigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFAdRevenuePigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.adRevenue ?: [NSNull null]),
    (self.currency ?: [NSNull null]),
    @(self.adType),
    (self.adNetwork ?: [NSNull null]),
    (self.adUnitId ?: [NSNull null]),
    (self.adUnitName ?: [NSNull null]),
    (self.adPlacementId ?: [NSNull null]),
    (self.adPlacementName ?: [NSNull null]),
    (self.precision ?: [NSNull null]),
    (self.payload ?: [NSNull null]),
  ];
}
@end

@implementation AMAFStartupParamsItemPigeon
+ (instancetype)makeWithId:(nullable NSString *)id
    status:(AMAFStartupParamsItemStatusPigeon)status
    errorDetails:(nullable NSString *)errorDetails {
  AMAFStartupParamsItemPigeon* pigeonResult = [[AMAFStartupParamsItemPigeon alloc] init];
  pigeonResult.id = id;
  pigeonResult.status = status;
  pigeonResult.errorDetails = errorDetails;
  return pigeonResult;
}
+ (AMAFStartupParamsItemPigeon *)fromList:(NSArray *)list {
  AMAFStartupParamsItemPigeon *pigeonResult = [[AMAFStartupParamsItemPigeon alloc] init];
  pigeonResult.id = GetNullableObjectAtIndex(list, 0);
  pigeonResult.status = [GetNullableObjectAtIndex(list, 1) integerValue];
  pigeonResult.errorDetails = GetNullableObjectAtIndex(list, 2);
  return pigeonResult;
}
+ (nullable AMAFStartupParamsItemPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFStartupParamsItemPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.id ?: [NSNull null]),
    @(self.status),
    (self.errorDetails ?: [NSNull null]),
  ];
}
@end

@implementation AMAFStartupParamsResultPigeon
+ (instancetype)makeWithDeviceId:(nullable NSString *)deviceId
    deviceIdHash:(nullable NSString *)deviceIdHash
    parameters:(nullable NSDictionary<NSString *, AMAFStartupParamsItemPigeon *> *)parameters
    uuid:(nullable NSString *)uuid {
  AMAFStartupParamsResultPigeon* pigeonResult = [[AMAFStartupParamsResultPigeon alloc] init];
  pigeonResult.deviceId = deviceId;
  pigeonResult.deviceIdHash = deviceIdHash;
  pigeonResult.parameters = parameters;
  pigeonResult.uuid = uuid;
  return pigeonResult;
}
+ (AMAFStartupParamsResultPigeon *)fromList:(NSArray *)list {
  AMAFStartupParamsResultPigeon *pigeonResult = [[AMAFStartupParamsResultPigeon alloc] init];
  pigeonResult.deviceId = GetNullableObjectAtIndex(list, 0);
  pigeonResult.deviceIdHash = GetNullableObjectAtIndex(list, 1);
  pigeonResult.parameters = GetNullableObjectAtIndex(list, 2);
  pigeonResult.uuid = GetNullableObjectAtIndex(list, 3);
  return pigeonResult;
}
+ (nullable AMAFStartupParamsResultPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFStartupParamsResultPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.deviceId ?: [NSNull null]),
    (self.deviceIdHash ?: [NSNull null]),
    (self.parameters ?: [NSNull null]),
    (self.uuid ?: [NSNull null]),
  ];
}
@end

@implementation AMAFStartupParamsReasonPigeon
+ (instancetype)makeWithValue:(NSString *)value {
  AMAFStartupParamsReasonPigeon* pigeonResult = [[AMAFStartupParamsReasonPigeon alloc] init];
  pigeonResult.value = value;
  return pigeonResult;
}
+ (AMAFStartupParamsReasonPigeon *)fromList:(NSArray *)list {
  AMAFStartupParamsReasonPigeon *pigeonResult = [[AMAFStartupParamsReasonPigeon alloc] init];
  pigeonResult.value = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.value != nil, @"");
  return pigeonResult;
}
+ (nullable AMAFStartupParamsReasonPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFStartupParamsReasonPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.value ?: [NSNull null]),
  ];
}
@end

@implementation AMAFStartupParamsPigeon
+ (instancetype)makeWithResult:(nullable AMAFStartupParamsResultPigeon *)result
    reason:(nullable AMAFStartupParamsReasonPigeon *)reason {
  AMAFStartupParamsPigeon* pigeonResult = [[AMAFStartupParamsPigeon alloc] init];
  pigeonResult.result = result;
  pigeonResult.reason = reason;
  return pigeonResult;
}
+ (AMAFStartupParamsPigeon *)fromList:(NSArray *)list {
  AMAFStartupParamsPigeon *pigeonResult = [[AMAFStartupParamsPigeon alloc] init];
  pigeonResult.result = [AMAFStartupParamsResultPigeon nullableFromList:(GetNullableObjectAtIndex(list, 0))];
  pigeonResult.reason = [AMAFStartupParamsReasonPigeon nullableFromList:(GetNullableObjectAtIndex(list, 1))];
  return pigeonResult;
}
+ (nullable AMAFStartupParamsPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFStartupParamsPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.result ? [self.result toList] : [NSNull null]),
    (self.reason ? [self.reason toList] : [NSNull null]),
  ];
}
@end

@implementation AMAFExternalAttributionPigeon
+ (instancetype)makeWithSource:(NSString *)source
    data:(NSDictionary<NSString *, id> *)data {
  AMAFExternalAttributionPigeon* pigeonResult = [[AMAFExternalAttributionPigeon alloc] init];
  pigeonResult.source = source;
  pigeonResult.data = data;
  return pigeonResult;
}
+ (AMAFExternalAttributionPigeon *)fromList:(NSArray *)list {
  AMAFExternalAttributionPigeon *pigeonResult = [[AMAFExternalAttributionPigeon alloc] init];
  pigeonResult.source = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.source != nil, @"");
  pigeonResult.data = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.data != nil, @"");
  return pigeonResult;
}
+ (nullable AMAFExternalAttributionPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFExternalAttributionPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.source ?: [NSNull null]),
    (self.data ?: [NSNull null]),
  ];
}
@end

@implementation AMAFReporterConfigPigeon
+ (instancetype)makeWithApiKey:(NSString *)apiKey
    appEnvironment:(nullable NSDictionary<NSString *, NSString *> *)appEnvironment
    dataSendingEnabled:(nullable NSNumber *)dataSendingEnabled
    dispatchPeriodSeconds:(nullable NSNumber *)dispatchPeriodSeconds
    logs:(nullable NSNumber *)logs
    maxReportsCount:(nullable NSNumber *)maxReportsCount
    maxReportsInDatabaseCount:(nullable NSNumber *)maxReportsInDatabaseCount
    sessionTimeout:(nullable NSNumber *)sessionTimeout
    userProfileID:(nullable NSString *)userProfileID {
  AMAFReporterConfigPigeon* pigeonResult = [[AMAFReporterConfigPigeon alloc] init];
  pigeonResult.apiKey = apiKey;
  pigeonResult.appEnvironment = appEnvironment;
  pigeonResult.dataSendingEnabled = dataSendingEnabled;
  pigeonResult.dispatchPeriodSeconds = dispatchPeriodSeconds;
  pigeonResult.logs = logs;
  pigeonResult.maxReportsCount = maxReportsCount;
  pigeonResult.maxReportsInDatabaseCount = maxReportsInDatabaseCount;
  pigeonResult.sessionTimeout = sessionTimeout;
  pigeonResult.userProfileID = userProfileID;
  return pigeonResult;
}
+ (AMAFReporterConfigPigeon *)fromList:(NSArray *)list {
  AMAFReporterConfigPigeon *pigeonResult = [[AMAFReporterConfigPigeon alloc] init];
  pigeonResult.apiKey = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.apiKey != nil, @"");
  pigeonResult.appEnvironment = GetNullableObjectAtIndex(list, 1);
  pigeonResult.dataSendingEnabled = GetNullableObjectAtIndex(list, 2);
  pigeonResult.dispatchPeriodSeconds = GetNullableObjectAtIndex(list, 3);
  pigeonResult.logs = GetNullableObjectAtIndex(list, 4);
  pigeonResult.maxReportsCount = GetNullableObjectAtIndex(list, 5);
  pigeonResult.maxReportsInDatabaseCount = GetNullableObjectAtIndex(list, 6);
  pigeonResult.sessionTimeout = GetNullableObjectAtIndex(list, 7);
  pigeonResult.userProfileID = GetNullableObjectAtIndex(list, 8);
  return pigeonResult;
}
+ (nullable AMAFReporterConfigPigeon *)nullableFromList:(NSArray *)list {
  return (list) ? [AMAFReporterConfigPigeon fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.apiKey ?: [NSNull null]),
    (self.appEnvironment ?: [NSNull null]),
    (self.dataSendingEnabled ?: [NSNull null]),
    (self.dispatchPeriodSeconds ?: [NSNull null]),
    (self.logs ?: [NSNull null]),
    (self.maxReportsCount ?: [NSNull null]),
    (self.maxReportsInDatabaseCount ?: [NSNull null]),
    (self.sessionTimeout ?: [NSNull null]),
    (self.userProfileID ?: [NSNull null]),
  ];
}
@end

@interface AMAFAppMetricaConfigConverterPigeonCodecReader : FlutterStandardReader
@end
@implementation AMAFAppMetricaConfigConverterPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [AMAFAppMetricaConfigPigeon fromList:[self readValue]];
    case 129: 
      return [AMAFLocationPigeon fromList:[self readValue]];
    case 130: 
      return [AMAFPreloadInfoPigeon fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface AMAFAppMetricaConfigConverterPigeonCodecWriter : FlutterStandardWriter
@end
@implementation AMAFAppMetricaConfigConverterPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AMAFAppMetricaConfigPigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFLocationPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFPreloadInfoPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface AMAFAppMetricaConfigConverterPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation AMAFAppMetricaConfigConverterPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[AMAFAppMetricaConfigConverterPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[AMAFAppMetricaConfigConverterPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *AMAFAppMetricaConfigConverterPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    AMAFAppMetricaConfigConverterPigeonCodecReaderWriter *readerWriter = [[AMAFAppMetricaConfigConverterPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void AMAFAppMetricaConfigConverterPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AMAFAppMetricaConfigConverterPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaConfigConverterPigeon.toJson"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaConfigConverterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(toJsonConfig:error:)], @"AMAFAppMetricaConfigConverterPigeon api (%@) doesn't respond to @selector(toJsonConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFAppMetricaConfigPigeon *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSString *output = [api toJsonConfig:arg_config error:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface AMAFAppMetricaPigeonCodecReader : FlutterStandardReader
@end
@implementation AMAFAppMetricaPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [AMAFAdRevenuePigeon fromList:[self readValue]];
    case 129: 
      return [AMAFAppMetricaConfigPigeon fromList:[self readValue]];
    case 130: 
      return [AMAFAppMetricaDeferredDeeplinkErrorPigeon fromList:[self readValue]];
    case 131: 
      return [AMAFAppMetricaDeferredDeeplinkParametersPigeon fromList:[self readValue]];
    case 132: 
      return [AMAFAppMetricaDeferredDeeplinkPigeon fromList:[self readValue]];
    case 133: 
      return [AMAFECommerceAmountPigeon fromList:[self readValue]];
    case 134: 
      return [AMAFECommerceAmountPigeon fromList:[self readValue]];
    case 135: 
      return [AMAFECommerceCartItemPigeon fromList:[self readValue]];
    case 136: 
      return [AMAFECommerceEventPigeon fromList:[self readValue]];
    case 137: 
      return [AMAFECommerceOrderPigeon fromList:[self readValue]];
    case 138: 
      return [AMAFECommercePricePigeon fromList:[self readValue]];
    case 139: 
      return [AMAFECommercePricePigeon fromList:[self readValue]];
    case 140: 
      return [AMAFECommerceProductPigeon fromList:[self readValue]];
    case 141: 
      return [AMAFECommerceProductPigeon fromList:[self readValue]];
    case 142: 
      return [AMAFECommerceReferrerPigeon fromList:[self readValue]];
    case 143: 
      return [AMAFECommerceScreenPigeon fromList:[self readValue]];
    case 144: 
      return [AMAFErrorDetailsPigeon fromList:[self readValue]];
    case 145: 
      return [AMAFErrorDetailsPigeon fromList:[self readValue]];
    case 146: 
      return [AMAFExternalAttributionPigeon fromList:[self readValue]];
    case 147: 
      return [AMAFLocationPigeon fromList:[self readValue]];
    case 148: 
      return [AMAFPreloadInfoPigeon fromList:[self readValue]];
    case 149: 
      return [AMAFReceiptPigeon fromList:[self readValue]];
    case 150: 
      return [AMAFReporterConfigPigeon fromList:[self readValue]];
    case 151: 
      return [AMAFRevenuePigeon fromList:[self readValue]];
    case 152: 
      return [AMAFStackTraceElementPigeon fromList:[self readValue]];
    case 153: 
      return [AMAFStartupParamsItemPigeon fromList:[self readValue]];
    case 154: 
      return [AMAFStartupParamsPigeon fromList:[self readValue]];
    case 155: 
      return [AMAFStartupParamsReasonPigeon fromList:[self readValue]];
    case 156: 
      return [AMAFStartupParamsResultPigeon fromList:[self readValue]];
    case 157: 
      return [AMAFUserProfileAttributePigeon fromList:[self readValue]];
    case 158: 
      return [AMAFUserProfilePigeon fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface AMAFAppMetricaPigeonCodecWriter : FlutterStandardWriter
@end
@implementation AMAFAppMetricaPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AMAFAdRevenuePigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFAppMetricaConfigPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFAppMetricaDeferredDeeplinkErrorPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFAppMetricaDeferredDeeplinkParametersPigeon class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFAppMetricaDeferredDeeplinkPigeon class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceAmountPigeon class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceAmountPigeon class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceCartItemPigeon class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceEventPigeon class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceOrderPigeon class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommercePricePigeon class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommercePricePigeon class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceProductPigeon class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceProductPigeon class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceReferrerPigeon class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceScreenPigeon class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFErrorDetailsPigeon class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFErrorDetailsPigeon class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFExternalAttributionPigeon class]]) {
    [self writeByte:146];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFLocationPigeon class]]) {
    [self writeByte:147];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFPreloadInfoPigeon class]]) {
    [self writeByte:148];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFReceiptPigeon class]]) {
    [self writeByte:149];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFReporterConfigPigeon class]]) {
    [self writeByte:150];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFRevenuePigeon class]]) {
    [self writeByte:151];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFStackTraceElementPigeon class]]) {
    [self writeByte:152];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFStartupParamsItemPigeon class]]) {
    [self writeByte:153];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFStartupParamsPigeon class]]) {
    [self writeByte:154];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFStartupParamsReasonPigeon class]]) {
    [self writeByte:155];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFStartupParamsResultPigeon class]]) {
    [self writeByte:156];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFUserProfileAttributePigeon class]]) {
    [self writeByte:157];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFUserProfilePigeon class]]) {
    [self writeByte:158];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface AMAFAppMetricaPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation AMAFAppMetricaPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[AMAFAppMetricaPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[AMAFAppMetricaPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *AMAFAppMetricaPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    AMAFAppMetricaPigeonCodecReaderWriter *readerWriter = [[AMAFAppMetricaPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void AMAFAppMetricaPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AMAFAppMetricaPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.activate"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateConfig:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(activateConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFAppMetricaConfigPigeon *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api activateConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.activateReporter"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(activateReporterConfig:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(activateReporterConfig:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFReporterConfigPigeon *arg_config = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api activateReporterConfig:arg_config error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.clearAppEnvironment"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearAppEnvironmentWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(clearAppEnvironmentWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearAppEnvironmentWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.enableActivityAutoTracking"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableActivityAutoTrackingWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(enableActivityAutoTrackingWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api enableActivityAutoTrackingWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getDeviceId"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getDeviceIdWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(getDeviceIdWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getDeviceIdWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getLibraryApiLevel"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLibraryApiLevelWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(getLibraryApiLevelWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api getLibraryApiLevelWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getLibraryVersion"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLibraryVersionWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(getLibraryVersionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getLibraryVersionWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getUuid"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getUuidWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(getUuidWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getUuidWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.pauseSession"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(pauseSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api pauseSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.putAppEnvironmentValue"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(putAppEnvironmentValueKey:value:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(putAppEnvironmentValueKey:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        NSString *arg_value = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api putAppEnvironmentValueKey:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.putErrorEnvironmentValue"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(putErrorEnvironmentValueKey:value:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(putErrorEnvironmentValueKey:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_key = GetNullableObjectAtIndex(args, 0);
        NSString *arg_value = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api putErrorEnvironmentValueKey:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportAdRevenue"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportAdRevenueAdRevenue:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportAdRevenueAdRevenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFAdRevenuePigeon *arg_adRevenue = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportAdRevenueAdRevenue:arg_adRevenue error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportAppOpen"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportAppOpenDeeplink:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportAppOpenDeeplink:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_deeplink = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportAppOpenDeeplink:arg_deeplink error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportECommerce"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportECommerceEvent:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportECommerceEvent:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFECommerceEventPigeon *arg_event = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportECommerceEvent:arg_event error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportError"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorError:message:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportErrorError:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 0);
        NSString *arg_message = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportErrorError:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportErrorWithGroup"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorWithGroupGroupId:error:message:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportErrorWithGroupGroupId:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 0);
        AMAFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 1);
        NSString *arg_message = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api reportErrorWithGroupGroupId:arg_groupId error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportEvent"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventEventName:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportEventEventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportEventEventName:arg_eventName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportEventWithJson"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventWithJsonEventName:attributesJson:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportEventWithJsonEventName:attributesJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 0);
        NSString *arg_attributesJson = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportEventWithJsonEventName:arg_eventName attributesJson:arg_attributesJson error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportExternalAttribution"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportExternalAttributionExternalAttributionPigeon:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportExternalAttributionExternalAttributionPigeon:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFExternalAttributionPigeon *arg_externalAttributionPigeon = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportExternalAttributionExternalAttributionPigeon:arg_externalAttributionPigeon error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportReferralUrl"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportReferralUrlReferralUrl:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportReferralUrlReferralUrl:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_referralUrl = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportReferralUrlReferralUrl:arg_referralUrl error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportRevenue"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRevenueRevenue:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportRevenueRevenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFRevenuePigeon *arg_revenue = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportRevenueRevenue:arg_revenue error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportUnhandledException"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUnhandledExceptionError:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportUnhandledExceptionError:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportUnhandledExceptionError:arg_error error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportUserProfile"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUserProfileUserProfile:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(reportUserProfileUserProfile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFUserProfilePigeon *arg_userProfile = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api reportUserProfileUserProfile:arg_userProfile error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestDeferredDeeplink"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestDeferredDeeplinkWithCompletion:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(requestDeferredDeeplinkWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestDeferredDeeplinkWithCompletion:^(AMAFAppMetricaDeferredDeeplinkPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestDeferredDeeplinkParameters"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestDeferredDeeplinkParametersWithCompletion:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(requestDeferredDeeplinkParametersWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api requestDeferredDeeplinkParametersWithCompletion:^(AMAFAppMetricaDeferredDeeplinkParametersPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestStartupParams"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestStartupParamsParams:completion:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(requestStartupParamsParams:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<NSString *> *arg_params = GetNullableObjectAtIndex(args, 0);
        [api requestStartupParamsParams:arg_params completion:^(AMAFStartupParamsPigeon *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.resumeSession"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(resumeSessionWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api resumeSessionWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.sendEventsBuffer"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventsBufferWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(sendEventsBufferWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api sendEventsBufferWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setDataSendingEnabled"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDataSendingEnabledEnabled:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(setDataSendingEnabledEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setDataSendingEnabledEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setLocation"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocationLocation:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(setLocationLocation:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        AMAFLocationPigeon *arg_location = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLocationLocation:arg_location error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setLocationTracking"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setLocationTrackingEnabled:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(setLocationTrackingEnabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setLocationTrackingEnabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setUserProfileID"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserProfileIDUserProfileID:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(setUserProfileIDUserProfileID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_userProfileID = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setUserProfileIDUserProfileID:arg_userProfileID error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.handlePluginInitFinished"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(handlePluginInitFinishedWithError:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(handlePluginInitFinishedWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api handlePluginInitFinishedWithError:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.touchReporter"
        binaryMessenger:binaryMessenger
        codec:AMAFAppMetricaPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(touchReporterApiKey:error:)], @"AMAFAppMetricaPigeon api (%@) doesn't respond to @selector(touchReporterApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api touchReporterApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface AMAFReporterPigeonCodecReader : FlutterStandardReader
@end
@implementation AMAFReporterPigeonCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [AMAFAdRevenuePigeon fromList:[self readValue]];
    case 129: 
      return [AMAFECommerceAmountPigeon fromList:[self readValue]];
    case 130: 
      return [AMAFECommerceAmountPigeon fromList:[self readValue]];
    case 131: 
      return [AMAFECommerceCartItemPigeon fromList:[self readValue]];
    case 132: 
      return [AMAFECommerceEventPigeon fromList:[self readValue]];
    case 133: 
      return [AMAFECommerceOrderPigeon fromList:[self readValue]];
    case 134: 
      return [AMAFECommercePricePigeon fromList:[self readValue]];
    case 135: 
      return [AMAFECommercePricePigeon fromList:[self readValue]];
    case 136: 
      return [AMAFECommerceProductPigeon fromList:[self readValue]];
    case 137: 
      return [AMAFECommerceProductPigeon fromList:[self readValue]];
    case 138: 
      return [AMAFECommerceReferrerPigeon fromList:[self readValue]];
    case 139: 
      return [AMAFECommerceScreenPigeon fromList:[self readValue]];
    case 140: 
      return [AMAFErrorDetailsPigeon fromList:[self readValue]];
    case 141: 
      return [AMAFErrorDetailsPigeon fromList:[self readValue]];
    case 142: 
      return [AMAFReceiptPigeon fromList:[self readValue]];
    case 143: 
      return [AMAFRevenuePigeon fromList:[self readValue]];
    case 144: 
      return [AMAFStackTraceElementPigeon fromList:[self readValue]];
    case 145: 
      return [AMAFUserProfileAttributePigeon fromList:[self readValue]];
    case 146: 
      return [AMAFUserProfilePigeon fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface AMAFReporterPigeonCodecWriter : FlutterStandardWriter
@end
@implementation AMAFReporterPigeonCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[AMAFAdRevenuePigeon class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceAmountPigeon class]]) {
    [self writeByte:129];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceAmountPigeon class]]) {
    [self writeByte:130];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceCartItemPigeon class]]) {
    [self writeByte:131];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceEventPigeon class]]) {
    [self writeByte:132];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceOrderPigeon class]]) {
    [self writeByte:133];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommercePricePigeon class]]) {
    [self writeByte:134];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommercePricePigeon class]]) {
    [self writeByte:135];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceProductPigeon class]]) {
    [self writeByte:136];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceProductPigeon class]]) {
    [self writeByte:137];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceReferrerPigeon class]]) {
    [self writeByte:138];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFECommerceScreenPigeon class]]) {
    [self writeByte:139];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFErrorDetailsPigeon class]]) {
    [self writeByte:140];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFErrorDetailsPigeon class]]) {
    [self writeByte:141];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFReceiptPigeon class]]) {
    [self writeByte:142];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFRevenuePigeon class]]) {
    [self writeByte:143];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFStackTraceElementPigeon class]]) {
    [self writeByte:144];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFUserProfileAttributePigeon class]]) {
    [self writeByte:145];
    [self writeValue:[value toList]];
  } else if ([value isKindOfClass:[AMAFUserProfilePigeon class]]) {
    [self writeByte:146];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface AMAFReporterPigeonCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation AMAFReporterPigeonCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[AMAFReporterPigeonCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[AMAFReporterPigeonCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *AMAFReporterPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    AMAFReporterPigeonCodecReaderWriter *readerWriter = [[AMAFReporterPigeonCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void AMAFReporterPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AMAFReporterPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.clearAppEnvironment"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearAppEnvironmentApiKey:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(clearAppEnvironmentApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api clearAppEnvironmentApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.pauseSession"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pauseSessionApiKey:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(pauseSessionApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api pauseSessionApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.putAppEnvironmentValue"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(putAppEnvironmentValueApiKey:key:value:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(putAppEnvironmentValueApiKey:key:value:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_key = GetNullableObjectAtIndex(args, 1);
        NSString *arg_value = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api putAppEnvironmentValueApiKey:arg_apiKey key:arg_key value:arg_value error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportAdRevenue"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportAdRevenueApiKey:adRevenue:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportAdRevenueApiKey:adRevenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        AMAFAdRevenuePigeon *arg_adRevenue = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportAdRevenueApiKey:arg_apiKey adRevenue:arg_adRevenue error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportECommerce"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportECommerceApiKey:event:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportECommerceApiKey:event:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        AMAFECommerceEventPigeon *arg_event = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportECommerceApiKey:arg_apiKey event:arg_event error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportError"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorApiKey:error:message:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportErrorApiKey:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        AMAFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 1);
        NSString *arg_message = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api reportErrorApiKey:arg_apiKey error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportErrorWithGroup"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportErrorWithGroupApiKey:groupId:error:message:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportErrorWithGroupApiKey:groupId:error:message:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_groupId = GetNullableObjectAtIndex(args, 1);
        AMAFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 2);
        NSString *arg_message = GetNullableObjectAtIndex(args, 3);
        FlutterError *error;
        [api reportErrorWithGroupApiKey:arg_apiKey groupId:arg_groupId error:arg_error message:arg_message error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportEvent"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventApiKey:eventName:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportEventApiKey:eventName:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportEventApiKey:arg_apiKey eventName:arg_eventName error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportEventWithJson"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportEventWithJsonApiKey:eventName:attributesJson:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportEventWithJsonApiKey:eventName:attributesJson:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_eventName = GetNullableObjectAtIndex(args, 1);
        NSString *arg_attributesJson = GetNullableObjectAtIndex(args, 2);
        FlutterError *error;
        [api reportEventWithJsonApiKey:arg_apiKey eventName:arg_eventName attributesJson:arg_attributesJson error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportRevenue"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportRevenueApiKey:revenue:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportRevenueApiKey:revenue:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        AMAFRevenuePigeon *arg_revenue = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportRevenueApiKey:arg_apiKey revenue:arg_revenue error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportUnhandledException"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUnhandledExceptionApiKey:error:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportUnhandledExceptionApiKey:error:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        AMAFErrorDetailsPigeon *arg_error = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportUnhandledExceptionApiKey:arg_apiKey error:arg_error error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportUserProfile"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(reportUserProfileApiKey:userProfile:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(reportUserProfileApiKey:userProfile:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        AMAFUserProfilePigeon *arg_userProfile = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api reportUserProfileApiKey:arg_apiKey userProfile:arg_userProfile error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.resumeSession"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(resumeSessionApiKey:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(resumeSessionApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api resumeSessionApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.sendEventsBuffer"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(sendEventsBufferApiKey:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(sendEventsBufferApiKey:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api sendEventsBufferApiKey:arg_apiKey error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.setDataSendingEnabled"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDataSendingEnabledApiKey:enabled:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(setDataSendingEnabledApiKey:enabled:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_enabled = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setDataSendingEnabledApiKey:arg_apiKey enabled:arg_enabled error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.setUserProfileID"
        binaryMessenger:binaryMessenger
        codec:AMAFReporterPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setUserProfileIDApiKey:userProfileID:error:)], @"AMAFReporterPigeon api (%@) doesn't respond to @selector(setUserProfileIDApiKey:userProfileID:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_apiKey = GetNullableObjectAtIndex(args, 0);
        NSString *arg_userProfileID = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        [api setUserProfileIDApiKey:arg_apiKey userProfileID:arg_userProfileID error:&error];
        callback(wrapResult(nil, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
NSObject<FlutterMessageCodec> *AMAFInitialDeepLinkHolderPigeonGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  sSharedObject = [FlutterStandardMessageCodec sharedInstance];
  return sSharedObject;
}

void AMAFInitialDeepLinkHolderPigeonSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<AMAFInitialDeepLinkHolderPigeon> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.appmetrica_plugin.InitialDeepLinkHolderPigeon.getInitialDeeplink"
        binaryMessenger:binaryMessenger
        codec:AMAFInitialDeepLinkHolderPigeonGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getInitialDeeplinkWithError:)], @"AMAFInitialDeepLinkHolderPigeon api (%@) doesn't respond to @selector(getInitialDeeplinkWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSString *output = [api getInitialDeeplinkWithError:&error];
        callback(wrapResult(output, error));
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
