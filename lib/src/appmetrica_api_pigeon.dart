// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum AppMetricaDeferredDeeplinkReasonPigeon {
  NOT_A_FIRST_LAUNCH,
  PARSE_ERROR,
  UNKNOWN,
  NO_REFERRER,
  NO_ERROR,
}

enum UserProfileAttributeType {
  BIRTH_DATE,
  BOOLEAN,
  COUNTER,
  GENDER,
  NAME,
  NOTIFICATION_ENABLED,
  NUMBER,
  STRING,
}

enum GenderPigeon {
  MALE,
  FEMALE,
  OTHER,
  UNDEFINED,
}

enum AdTypePigeon {
  UNKNOWN,
  NATIVE,
  BANNER,
  REWARDED,
  INTERSTITIAL,
  MREC,
  APP_OPEN,
  OTHER,
}

enum StartupParamsItemStatusPigeon {
  FEATURE_DISABLED,
  INVALID_VALUE_FROM_PROVIDER,
  NETWORK_ERROR,
  OK,
  PROVIDER_UNAVAILABLE,
  UNKNOWN_ERROR,
}

class AppMetricaConfigPigeon {
  AppMetricaConfigPigeon({
    required this.apiKey,
    this.advIdentifiersTracking,
    this.anrMonitoring,
    this.anrMonitoringTimeout,
    this.appBuildNumber,
    this.appEnvironment,
    this.appOpenTrackingEnabled,
    this.appVersion,
    this.crashReporting,
    this.customHosts,
    this.dataSendingEnabled,
    this.deviceType,
    this.dispatchPeriodSeconds,
    this.errorEnvironment,
    this.firstActivationAsUpdate,
    this.location,
    this.locationTracking,
    this.logs,
    this.maxReportsCount,
    this.maxReportsInDatabaseCount,
    this.nativeCrashReporting,
    this.preloadInfo,
    this.revenueAutoTrackingEnabled,
    this.sessionTimeout,
    this.sessionsAutoTrackingEnabled,
    this.userProfileID,
  });

  String apiKey;

  bool? advIdentifiersTracking;

  bool? anrMonitoring;

  int? anrMonitoringTimeout;

  int? appBuildNumber;

  Map<String?, String?>? appEnvironment;

  bool? appOpenTrackingEnabled;

  String? appVersion;

  bool? crashReporting;

  List<String?>? customHosts;

  bool? dataSendingEnabled;

  String? deviceType;

  int? dispatchPeriodSeconds;

  Map<String?, String?>? errorEnvironment;

  bool? firstActivationAsUpdate;

  LocationPigeon? location;

  bool? locationTracking;

  bool? logs;

  int? maxReportsCount;

  int? maxReportsInDatabaseCount;

  bool? nativeCrashReporting;

  PreloadInfoPigeon? preloadInfo;

  bool? revenueAutoTrackingEnabled;

  int? sessionTimeout;

  bool? sessionsAutoTrackingEnabled;

  String? userProfileID;

  Object encode() {
    return <Object?>[
      apiKey,
      advIdentifiersTracking,
      anrMonitoring,
      anrMonitoringTimeout,
      appBuildNumber,
      appEnvironment,
      appOpenTrackingEnabled,
      appVersion,
      crashReporting,
      customHosts,
      dataSendingEnabled,
      deviceType,
      dispatchPeriodSeconds,
      errorEnvironment,
      firstActivationAsUpdate,
      location?.encode(),
      locationTracking,
      logs,
      maxReportsCount,
      maxReportsInDatabaseCount,
      nativeCrashReporting,
      preloadInfo?.encode(),
      revenueAutoTrackingEnabled,
      sessionTimeout,
      sessionsAutoTrackingEnabled,
      userProfileID,
    ];
  }

  static AppMetricaConfigPigeon decode(Object result) {
    result as List<Object?>;
    return AppMetricaConfigPigeon(
      apiKey: result[0]! as String,
      advIdentifiersTracking: result[1] as bool?,
      anrMonitoring: result[2] as bool?,
      anrMonitoringTimeout: result[3] as int?,
      appBuildNumber: result[4] as int?,
      appEnvironment: (result[5] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      appOpenTrackingEnabled: result[6] as bool?,
      appVersion: result[7] as String?,
      crashReporting: result[8] as bool?,
      customHosts: (result[9] as List<Object?>?)?.cast<String?>(),
      dataSendingEnabled: result[10] as bool?,
      deviceType: result[11] as String?,
      dispatchPeriodSeconds: result[12] as int?,
      errorEnvironment: (result[13] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      firstActivationAsUpdate: result[14] as bool?,
      location: result[15] != null
          ? LocationPigeon.decode(result[15]! as List<Object?>)
          : null,
      locationTracking: result[16] as bool?,
      logs: result[17] as bool?,
      maxReportsCount: result[18] as int?,
      maxReportsInDatabaseCount: result[19] as int?,
      nativeCrashReporting: result[20] as bool?,
      preloadInfo: result[21] != null
          ? PreloadInfoPigeon.decode(result[21]! as List<Object?>)
          : null,
      revenueAutoTrackingEnabled: result[22] as bool?,
      sessionTimeout: result[23] as int?,
      sessionsAutoTrackingEnabled: result[24] as bool?,
      userProfileID: result[25] as String?,
    );
  }
}

class LocationPigeon {
  LocationPigeon({
    required this.latitude,
    required this.longitude,
    this.provider,
    this.altitude,
    this.accuracy,
    this.course,
    this.speed,
    this.timestamp,
  });

  double latitude;

  double longitude;

  String? provider;

  double? altitude;

  double? accuracy;

  double? course;

  double? speed;

  int? timestamp;

  Object encode() {
    return <Object?>[
      latitude,
      longitude,
      provider,
      altitude,
      accuracy,
      course,
      speed,
      timestamp,
    ];
  }

  static LocationPigeon decode(Object result) {
    result as List<Object?>;
    return LocationPigeon(
      latitude: result[0]! as double,
      longitude: result[1]! as double,
      provider: result[2] as String?,
      altitude: result[3] as double?,
      accuracy: result[4] as double?,
      course: result[5] as double?,
      speed: result[6] as double?,
      timestamp: result[7] as int?,
    );
  }
}

class PreloadInfoPigeon {
  PreloadInfoPigeon({
    required this.trackingId,
    this.additionalInfo,
  });

  String trackingId;

  Map<String?, String?>? additionalInfo;

  Object encode() {
    return <Object?>[
      trackingId,
      additionalInfo,
    ];
  }

  static PreloadInfoPigeon decode(Object result) {
    result as List<Object?>;
    return PreloadInfoPigeon(
      trackingId: result[0]! as String,
      additionalInfo: (result[1] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class AppMetricaDeferredDeeplinkErrorPigeon {
  AppMetricaDeferredDeeplinkErrorPigeon({
    required this.reason,
    required this.description,
    this.message,
  });

  AppMetricaDeferredDeeplinkReasonPigeon reason;

  String description;

  String? message;

  Object encode() {
    return <Object?>[
      reason.index,
      description,
      message,
    ];
  }

  static AppMetricaDeferredDeeplinkErrorPigeon decode(Object result) {
    result as List<Object?>;
    return AppMetricaDeferredDeeplinkErrorPigeon(
      reason: AppMetricaDeferredDeeplinkReasonPigeon.values[result[0]! as int],
      description: result[1]! as String,
      message: result[2] as String?,
    );
  }
}

class AppMetricaDeferredDeeplinkPigeon {
  AppMetricaDeferredDeeplinkPigeon({
    this.deeplink,
    this.error,
  });

  String? deeplink;

  AppMetricaDeferredDeeplinkErrorPigeon? error;

  Object encode() {
    return <Object?>[
      deeplink,
      error?.encode(),
    ];
  }

  static AppMetricaDeferredDeeplinkPigeon decode(Object result) {
    result as List<Object?>;
    return AppMetricaDeferredDeeplinkPigeon(
      deeplink: result[0] as String?,
      error: result[1] != null
          ? AppMetricaDeferredDeeplinkErrorPigeon.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class AppMetricaDeferredDeeplinkParametersPigeon {
  AppMetricaDeferredDeeplinkParametersPigeon({
    this.parameters,
    this.error,
  });

  Map<String?, String?>? parameters;

  AppMetricaDeferredDeeplinkErrorPigeon? error;

  Object encode() {
    return <Object?>[
      parameters,
      error?.encode(),
    ];
  }

  static AppMetricaDeferredDeeplinkParametersPigeon decode(Object result) {
    result as List<Object?>;
    return AppMetricaDeferredDeeplinkParametersPigeon(
      parameters: (result[0] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      error: result[1] != null
          ? AppMetricaDeferredDeeplinkErrorPigeon.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class RevenuePigeon {
  RevenuePigeon({
    required this.price,
    required this.currency,
    this.quantity,
    this.productId,
    this.payload,
    this.receipt,
    this.transactionId,
  });

  String price;

  String currency;

  int? quantity;

  String? productId;

  String? payload;

  ReceiptPigeon? receipt;

  String? transactionId;

  Object encode() {
    return <Object?>[
      price,
      currency,
      quantity,
      productId,
      payload,
      receipt?.encode(),
      transactionId,
    ];
  }

  static RevenuePigeon decode(Object result) {
    result as List<Object?>;
    return RevenuePigeon(
      price: result[0]! as String,
      currency: result[1]! as String,
      quantity: result[2] as int?,
      productId: result[3] as String?,
      payload: result[4] as String?,
      receipt: result[5] != null
          ? ReceiptPigeon.decode(result[5]! as List<Object?>)
          : null,
      transactionId: result[6] as String?,
    );
  }
}

class ReceiptPigeon {
  ReceiptPigeon({
    this.data,
    this.signature,
  });

  String? data;

  String? signature;

  Object encode() {
    return <Object?>[
      data,
      signature,
    ];
  }

  static ReceiptPigeon decode(Object result) {
    result as List<Object?>;
    return ReceiptPigeon(
      data: result[0] as String?,
      signature: result[1] as String?,
    );
  }
}

class ECommerceAmountPigeon {
  ECommerceAmountPigeon({
    required this.amount,
    required this.currency,
  });

  String amount;

  String currency;

  Object encode() {
    return <Object?>[
      amount,
      currency,
    ];
  }

  static ECommerceAmountPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceAmountPigeon(
      amount: result[0]! as String,
      currency: result[1]! as String,
    );
  }
}

class ECommerceProductPigeon {
  ECommerceProductPigeon({
    required this.sku,
    this.name,
    this.categoriesPath,
    this.payload,
    this.actualPrice,
    this.originalPrice,
    this.promocodes,
  });

  String sku;

  String? name;

  List<String?>? categoriesPath;

  Map<String?, String?>? payload;

  ECommercePricePigeon? actualPrice;

  ECommercePricePigeon? originalPrice;

  List<String?>? promocodes;

  Object encode() {
    return <Object?>[
      sku,
      name,
      categoriesPath,
      payload,
      actualPrice?.encode(),
      originalPrice?.encode(),
      promocodes,
    ];
  }

  static ECommerceProductPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceProductPigeon(
      sku: result[0]! as String,
      name: result[1] as String?,
      categoriesPath: (result[2] as List<Object?>?)?.cast<String?>(),
      payload: (result[3] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      actualPrice: result[4] != null
          ? ECommercePricePigeon.decode(result[4]! as List<Object?>)
          : null,
      originalPrice: result[5] != null
          ? ECommercePricePigeon.decode(result[5]! as List<Object?>)
          : null,
      promocodes: (result[6] as List<Object?>?)?.cast<String?>(),
    );
  }
}

class ECommercePricePigeon {
  ECommercePricePigeon({
    required this.fiat,
    this.internalComponents,
  });

  ECommerceAmountPigeon fiat;

  List<ECommerceAmountPigeon?>? internalComponents;

  Object encode() {
    return <Object?>[
      fiat.encode(),
      internalComponents,
    ];
  }

  static ECommercePricePigeon decode(Object result) {
    result as List<Object?>;
    return ECommercePricePigeon(
      fiat: ECommerceAmountPigeon.decode(result[0]! as List<Object?>),
      internalComponents: (result[1] as List<Object?>?)?.cast<ECommerceAmountPigeon?>(),
    );
  }
}

class ECommerceReferrerPigeon {
  ECommerceReferrerPigeon({
    this.type,
    this.identifier,
    this.screen,
  });

  String? type;

  String? identifier;

  ECommerceScreenPigeon? screen;

  Object encode() {
    return <Object?>[
      type,
      identifier,
      screen?.encode(),
    ];
  }

  static ECommerceReferrerPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceReferrerPigeon(
      type: result[0] as String?,
      identifier: result[1] as String?,
      screen: result[2] != null
          ? ECommerceScreenPigeon.decode(result[2]! as List<Object?>)
          : null,
    );
  }
}

class ECommerceScreenPigeon {
  ECommerceScreenPigeon({
    this.name,
    this.categoriesPath,
    this.searchQuery,
    this.payload,
  });

  String? name;

  List<String?>? categoriesPath;

  String? searchQuery;

  Map<String?, String?>? payload;

  Object encode() {
    return <Object?>[
      name,
      categoriesPath,
      searchQuery,
      payload,
    ];
  }

  static ECommerceScreenPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceScreenPigeon(
      name: result[0] as String?,
      categoriesPath: (result[1] as List<Object?>?)?.cast<String?>(),
      searchQuery: result[2] as String?,
      payload: (result[3] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class ECommerceCartItemPigeon {
  ECommerceCartItemPigeon({
    required this.product,
    required this.quantity,
    required this.revenue,
    this.referrer,
  });

  ECommerceProductPigeon product;

  String quantity;

  ECommercePricePigeon revenue;

  ECommerceReferrerPigeon? referrer;

  Object encode() {
    return <Object?>[
      product.encode(),
      quantity,
      revenue.encode(),
      referrer?.encode(),
    ];
  }

  static ECommerceCartItemPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceCartItemPigeon(
      product: ECommerceProductPigeon.decode(result[0]! as List<Object?>),
      quantity: result[1]! as String,
      revenue: ECommercePricePigeon.decode(result[2]! as List<Object?>),
      referrer: result[3] != null
          ? ECommerceReferrerPigeon.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class ECommerceOrderPigeon {
  ECommerceOrderPigeon({
    required this.identifier,
    required this.items,
    this.payload,
  });

  String identifier;

  List<ECommerceCartItemPigeon?> items;

  Map<String?, String?>? payload;

  Object encode() {
    return <Object?>[
      identifier,
      items,
      payload,
    ];
  }

  static ECommerceOrderPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceOrderPigeon(
      identifier: result[0]! as String,
      items: (result[1] as List<Object?>?)!.cast<ECommerceCartItemPigeon?>(),
      payload: (result[2] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class ECommerceEventPigeon {
  ECommerceEventPigeon({
    required this.eventType,
    this.cartItem,
    this.order,
    this.product,
    this.referrer,
    this.screen,
  });

  String eventType;

  ECommerceCartItemPigeon? cartItem;

  ECommerceOrderPigeon? order;

  ECommerceProductPigeon? product;

  ECommerceReferrerPigeon? referrer;

  ECommerceScreenPigeon? screen;

  Object encode() {
    return <Object?>[
      eventType,
      cartItem?.encode(),
      order?.encode(),
      product?.encode(),
      referrer?.encode(),
      screen?.encode(),
    ];
  }

  static ECommerceEventPigeon decode(Object result) {
    result as List<Object?>;
    return ECommerceEventPigeon(
      eventType: result[0]! as String,
      cartItem: result[1] != null
          ? ECommerceCartItemPigeon.decode(result[1]! as List<Object?>)
          : null,
      order: result[2] != null
          ? ECommerceOrderPigeon.decode(result[2]! as List<Object?>)
          : null,
      product: result[3] != null
          ? ECommerceProductPigeon.decode(result[3]! as List<Object?>)
          : null,
      referrer: result[4] != null
          ? ECommerceReferrerPigeon.decode(result[4]! as List<Object?>)
          : null,
      screen: result[5] != null
          ? ECommerceScreenPigeon.decode(result[5]! as List<Object?>)
          : null,
    );
  }
}

class StackTraceElementPigeon {
  StackTraceElementPigeon({
    required this.className,
    this.fileName,
    required this.line,
    required this.column,
    required this.methodName,
  });

  String className;

  String? fileName;

  int line;

  int column;

  String methodName;

  Object encode() {
    return <Object?>[
      className,
      fileName,
      line,
      column,
      methodName,
    ];
  }

  static StackTraceElementPigeon decode(Object result) {
    result as List<Object?>;
    return StackTraceElementPigeon(
      className: result[0]! as String,
      fileName: result[1] as String?,
      line: result[2]! as int,
      column: result[3]! as int,
      methodName: result[4]! as String,
    );
  }
}

class ErrorDetailsPigeon {
  ErrorDetailsPigeon({
    required this.exceptionClass,
    this.message,
    required this.dartVersion,
    this.backtrace,
  });

  String exceptionClass;

  String? message;

  String dartVersion;

  List<StackTraceElementPigeon?>? backtrace;

  Object encode() {
    return <Object?>[
      exceptionClass,
      message,
      dartVersion,
      backtrace,
    ];
  }

  static ErrorDetailsPigeon decode(Object result) {
    result as List<Object?>;
    return ErrorDetailsPigeon(
      exceptionClass: result[0]! as String,
      message: result[1] as String?,
      dartVersion: result[2]! as String,
      backtrace: (result[3] as List<Object?>?)?.cast<StackTraceElementPigeon?>(),
    );
  }
}

class UserProfileAttributePigeon {
  UserProfileAttributePigeon({
    required this.key,
    this.doubleValue,
    this.stringValue,
    this.boolValue,
    this.year,
    this.month,
    this.day,
    this.age,
    this.genderValue,
    this.ifUndefined,
    this.reset,
    this.type,
  });

  String key;

  double? doubleValue;

  String? stringValue;

  bool? boolValue;

  int? year;

  int? month;

  int? day;

  int? age;

  GenderPigeon? genderValue;

  bool? ifUndefined;

  bool? reset;

  UserProfileAttributeType? type;

  Object encode() {
    return <Object?>[
      key,
      doubleValue,
      stringValue,
      boolValue,
      year,
      month,
      day,
      age,
      genderValue?.index,
      ifUndefined,
      reset,
      type?.index,
    ];
  }

  static UserProfileAttributePigeon decode(Object result) {
    result as List<Object?>;
    return UserProfileAttributePigeon(
      key: result[0]! as String,
      doubleValue: result[1] as double?,
      stringValue: result[2] as String?,
      boolValue: result[3] as bool?,
      year: result[4] as int?,
      month: result[5] as int?,
      day: result[6] as int?,
      age: result[7] as int?,
      genderValue: result[8] != null
          ? GenderPigeon.values[result[8]! as int]
          : null,
      ifUndefined: result[9] as bool?,
      reset: result[10] as bool?,
      type: result[11] != null
          ? UserProfileAttributeType.values[result[11]! as int]
          : null,
    );
  }
}

class UserProfilePigeon {
  UserProfilePigeon({
    required this.attributes,
  });

  List<UserProfileAttributePigeon?> attributes;

  Object encode() {
    return <Object?>[
      attributes,
    ];
  }

  static UserProfilePigeon decode(Object result) {
    result as List<Object?>;
    return UserProfilePigeon(
      attributes: (result[0] as List<Object?>?)!.cast<UserProfileAttributePigeon?>(),
    );
  }
}

class AdRevenuePigeon {
  AdRevenuePigeon({
    required this.adRevenue,
    required this.currency,
    this.adType,
    this.adNetwork,
    this.adUnitId,
    this.adUnitName,
    this.adPlacementId,
    this.adPlacementName,
    this.precision,
    this.payload,
  });

  String adRevenue;

  String currency;

  AdTypePigeon? adType;

  String? adNetwork;

  String? adUnitId;

  String? adUnitName;

  String? adPlacementId;

  String? adPlacementName;

  String? precision;

  Map<String?, String?>? payload;

  Object encode() {
    return <Object?>[
      adRevenue,
      currency,
      adType?.index,
      adNetwork,
      adUnitId,
      adUnitName,
      adPlacementId,
      adPlacementName,
      precision,
      payload,
    ];
  }

  static AdRevenuePigeon decode(Object result) {
    result as List<Object?>;
    return AdRevenuePigeon(
      adRevenue: result[0]! as String,
      currency: result[1]! as String,
      adType: result[2] != null
          ? AdTypePigeon.values[result[2]! as int]
          : null,
      adNetwork: result[3] as String?,
      adUnitId: result[4] as String?,
      adUnitName: result[5] as String?,
      adPlacementId: result[6] as String?,
      adPlacementName: result[7] as String?,
      precision: result[8] as String?,
      payload: (result[9] as Map<Object?, Object?>?)?.cast<String?, String?>(),
    );
  }
}

class StartupParamsItemPigeon {
  StartupParamsItemPigeon({
    this.id,
    required this.status,
    this.errorDetails,
  });

  String? id;

  StartupParamsItemStatusPigeon status;

  String? errorDetails;

  Object encode() {
    return <Object?>[
      id,
      status.index,
      errorDetails,
    ];
  }

  static StartupParamsItemPigeon decode(Object result) {
    result as List<Object?>;
    return StartupParamsItemPigeon(
      id: result[0] as String?,
      status: StartupParamsItemStatusPigeon.values[result[1]! as int],
      errorDetails: result[2] as String?,
    );
  }
}

class StartupParamsResultPigeon {
  StartupParamsResultPigeon({
    this.deviceId,
    this.deviceIdHash,
    this.parameters,
    this.uuid,
  });

  String? deviceId;

  String? deviceIdHash;

  Map<String?, StartupParamsItemPigeon?>? parameters;

  String? uuid;

  Object encode() {
    return <Object?>[
      deviceId,
      deviceIdHash,
      parameters,
      uuid,
    ];
  }

  static StartupParamsResultPigeon decode(Object result) {
    result as List<Object?>;
    return StartupParamsResultPigeon(
      deviceId: result[0] as String?,
      deviceIdHash: result[1] as String?,
      parameters: (result[2] as Map<Object?, Object?>?)?.cast<String?, StartupParamsItemPigeon?>(),
      uuid: result[3] as String?,
    );
  }
}

class StartupParamsReasonPigeon {
  StartupParamsReasonPigeon({
    required this.value,
  });

  String value;

  Object encode() {
    return <Object?>[
      value,
    ];
  }

  static StartupParamsReasonPigeon decode(Object result) {
    result as List<Object?>;
    return StartupParamsReasonPigeon(
      value: result[0]! as String,
    );
  }
}

class StartupParamsPigeon {
  StartupParamsPigeon({
    this.result,
    this.reason,
  });

  StartupParamsResultPigeon? result;

  StartupParamsReasonPigeon? reason;

  Object encode() {
    return <Object?>[
      result?.encode(),
      reason?.encode(),
    ];
  }

  static StartupParamsPigeon decode(Object result) {
    result as List<Object?>;
    return StartupParamsPigeon(
      result: result[0] != null
          ? StartupParamsResultPigeon.decode(result[0]! as List<Object?>)
          : null,
      reason: result[1] != null
          ? StartupParamsReasonPigeon.decode(result[1]! as List<Object?>)
          : null,
    );
  }
}

class ExternalAttributionPigeon {
  ExternalAttributionPigeon({
    required this.source,
    required this.data,
  });

  String source;

  Map<String?, Object?> data;

  Object encode() {
    return <Object?>[
      source,
      data,
    ];
  }

  static ExternalAttributionPigeon decode(Object result) {
    result as List<Object?>;
    return ExternalAttributionPigeon(
      source: result[0]! as String,
      data: (result[1] as Map<Object?, Object?>?)!.cast<String?, Object?>(),
    );
  }
}

class ReporterConfigPigeon {
  ReporterConfigPigeon({
    required this.apiKey,
    this.appEnvironment,
    this.dataSendingEnabled,
    this.dispatchPeriodSeconds,
    this.logs,
    this.maxReportsCount,
    this.maxReportsInDatabaseCount,
    this.sessionTimeout,
    this.userProfileID,
  });

  String apiKey;

  Map<String?, String?>? appEnvironment;

  bool? dataSendingEnabled;

  int? dispatchPeriodSeconds;

  bool? logs;

  int? maxReportsCount;

  int? maxReportsInDatabaseCount;

  int? sessionTimeout;

  String? userProfileID;

  Object encode() {
    return <Object?>[
      apiKey,
      appEnvironment,
      dataSendingEnabled,
      dispatchPeriodSeconds,
      logs,
      maxReportsCount,
      maxReportsInDatabaseCount,
      sessionTimeout,
      userProfileID,
    ];
  }

  static ReporterConfigPigeon decode(Object result) {
    result as List<Object?>;
    return ReporterConfigPigeon(
      apiKey: result[0]! as String,
      appEnvironment: (result[1] as Map<Object?, Object?>?)?.cast<String?, String?>(),
      dataSendingEnabled: result[2] as bool?,
      dispatchPeriodSeconds: result[3] as int?,
      logs: result[4] as bool?,
      maxReportsCount: result[5] as int?,
      maxReportsInDatabaseCount: result[6] as int?,
      sessionTimeout: result[7] as int?,
      userProfileID: result[8] as String?,
    );
  }
}

class _AppMetricaConfigConverterPigeonCodec extends StandardMessageCodec {
  const _AppMetricaConfigConverterPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AppMetricaConfigPigeon) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is LocationPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is PreloadInfoPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AppMetricaConfigPigeon.decode(readValue(buffer)!);
      case 129: 
        return LocationPigeon.decode(readValue(buffer)!);
      case 130: 
        return PreloadInfoPigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AppMetricaConfigConverterPigeon {
  /// Constructor for [AppMetricaConfigConverterPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AppMetricaConfigConverterPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _AppMetricaConfigConverterPigeonCodec();

  Future<String> toJson(AppMetricaConfigPigeon arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaConfigConverterPigeon.toJson', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }
}

class _AppMetricaPigeonCodec extends StandardMessageCodec {
  const _AppMetricaPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdRevenuePigeon) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaConfigPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeferredDeeplinkErrorPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeferredDeeplinkParametersPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is AppMetricaDeferredDeeplinkPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceCartItemPigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceEventPigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceOrderPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceReferrerPigeon) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceScreenPigeon) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is ExternalAttributionPigeon) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else if (value is LocationPigeon) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else if (value is PreloadInfoPigeon) {
      buffer.putUint8(148);
      writeValue(buffer, value.encode());
    } else if (value is ReceiptPigeon) {
      buffer.putUint8(149);
      writeValue(buffer, value.encode());
    } else if (value is ReporterConfigPigeon) {
      buffer.putUint8(150);
      writeValue(buffer, value.encode());
    } else if (value is RevenuePigeon) {
      buffer.putUint8(151);
      writeValue(buffer, value.encode());
    } else if (value is StackTraceElementPigeon) {
      buffer.putUint8(152);
      writeValue(buffer, value.encode());
    } else if (value is StartupParamsItemPigeon) {
      buffer.putUint8(153);
      writeValue(buffer, value.encode());
    } else if (value is StartupParamsPigeon) {
      buffer.putUint8(154);
      writeValue(buffer, value.encode());
    } else if (value is StartupParamsReasonPigeon) {
      buffer.putUint8(155);
      writeValue(buffer, value.encode());
    } else if (value is StartupParamsResultPigeon) {
      buffer.putUint8(156);
      writeValue(buffer, value.encode());
    } else if (value is UserProfileAttributePigeon) {
      buffer.putUint8(157);
      writeValue(buffer, value.encode());
    } else if (value is UserProfilePigeon) {
      buffer.putUint8(158);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AdRevenuePigeon.decode(readValue(buffer)!);
      case 129: 
        return AppMetricaConfigPigeon.decode(readValue(buffer)!);
      case 130: 
        return AppMetricaDeferredDeeplinkErrorPigeon.decode(readValue(buffer)!);
      case 131: 
        return AppMetricaDeferredDeeplinkParametersPigeon.decode(readValue(buffer)!);
      case 132: 
        return AppMetricaDeferredDeeplinkPigeon.decode(readValue(buffer)!);
      case 133: 
        return ECommerceAmountPigeon.decode(readValue(buffer)!);
      case 134: 
        return ECommerceAmountPigeon.decode(readValue(buffer)!);
      case 135: 
        return ECommerceCartItemPigeon.decode(readValue(buffer)!);
      case 136: 
        return ECommerceEventPigeon.decode(readValue(buffer)!);
      case 137: 
        return ECommerceOrderPigeon.decode(readValue(buffer)!);
      case 138: 
        return ECommercePricePigeon.decode(readValue(buffer)!);
      case 139: 
        return ECommercePricePigeon.decode(readValue(buffer)!);
      case 140: 
        return ECommerceProductPigeon.decode(readValue(buffer)!);
      case 141: 
        return ECommerceProductPigeon.decode(readValue(buffer)!);
      case 142: 
        return ECommerceReferrerPigeon.decode(readValue(buffer)!);
      case 143: 
        return ECommerceScreenPigeon.decode(readValue(buffer)!);
      case 144: 
        return ErrorDetailsPigeon.decode(readValue(buffer)!);
      case 145: 
        return ErrorDetailsPigeon.decode(readValue(buffer)!);
      case 146: 
        return ExternalAttributionPigeon.decode(readValue(buffer)!);
      case 147: 
        return LocationPigeon.decode(readValue(buffer)!);
      case 148: 
        return PreloadInfoPigeon.decode(readValue(buffer)!);
      case 149: 
        return ReceiptPigeon.decode(readValue(buffer)!);
      case 150: 
        return ReporterConfigPigeon.decode(readValue(buffer)!);
      case 151: 
        return RevenuePigeon.decode(readValue(buffer)!);
      case 152: 
        return StackTraceElementPigeon.decode(readValue(buffer)!);
      case 153: 
        return StartupParamsItemPigeon.decode(readValue(buffer)!);
      case 154: 
        return StartupParamsPigeon.decode(readValue(buffer)!);
      case 155: 
        return StartupParamsReasonPigeon.decode(readValue(buffer)!);
      case 156: 
        return StartupParamsResultPigeon.decode(readValue(buffer)!);
      case 157: 
        return UserProfileAttributePigeon.decode(readValue(buffer)!);
      case 158: 
        return UserProfilePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class AppMetricaPigeon {
  /// Constructor for [AppMetricaPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AppMetricaPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _AppMetricaPigeonCodec();

  Future<void> activate(AppMetricaConfigPigeon arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.activate', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> activateReporter(ReporterConfigPigeon arg_config) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.activateReporter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_config]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearAppEnvironment() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.clearAppEnvironment', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> enableActivityAutoTracking() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.enableActivityAutoTracking', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String?> getDeviceId() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getDeviceId', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }

  Future<int> getLibraryApiLevel() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getLibraryApiLevel', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as int?)!;
    }
  }

  Future<String> getLibraryVersion() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getLibraryVersion', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as String?)!;
    }
  }

  Future<String?> getUuid() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.getUuid', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }

  Future<void> pauseSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.pauseSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> putAppEnvironmentValue(String arg_key, String? arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.putAppEnvironmentValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_key, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> putErrorEnvironmentValue(String arg_key, String? arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.putErrorEnvironmentValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_key, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportAdRevenue(AdRevenuePigeon arg_adRevenue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportAdRevenue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_adRevenue]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportAppOpen(String arg_deeplink) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportAppOpen', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_deeplink]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportECommerce(ECommerceEventPigeon arg_event) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportECommerce', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_event]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportError(ErrorDetailsPigeon arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportError', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_error, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportErrorWithGroup(String arg_groupId, ErrorDetailsPigeon? arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportErrorWithGroup', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_groupId, arg_error, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportEvent(String arg_eventName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportEvent', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_eventName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportEventWithJson(String arg_eventName, String? arg_attributesJson) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportEventWithJson', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_eventName, arg_attributesJson]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportExternalAttribution(ExternalAttributionPigeon arg_externalAttributionPigeon) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportExternalAttribution', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_externalAttributionPigeon]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportReferralUrl(String arg_referralUrl) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportReferralUrl', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_referralUrl]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportRevenue(RevenuePigeon arg_revenue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportRevenue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_revenue]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportUnhandledException(ErrorDetailsPigeon arg_error) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportUnhandledException', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_error]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportUserProfile(UserProfilePigeon arg_userProfile) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.reportUserProfile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userProfile]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<AppMetricaDeferredDeeplinkPigeon> requestDeferredDeeplink() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestDeferredDeeplink', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AppMetricaDeferredDeeplinkPigeon?)!;
    }
  }

  Future<AppMetricaDeferredDeeplinkParametersPigeon> requestDeferredDeeplinkParameters() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestDeferredDeeplinkParameters', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as AppMetricaDeferredDeeplinkParametersPigeon?)!;
    }
  }

  Future<StartupParamsPigeon> requestStartupParams(List<String?> arg_params) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.requestStartupParams', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_params]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as StartupParamsPigeon?)!;
    }
  }

  Future<void> resumeSession() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.resumeSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendEventsBuffer() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.sendEventsBuffer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setAdvIdentifiersTracking(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setAdvIdentifiersTracking', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDataSendingEnabled(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setDataSendingEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLocation(LocationPigeon? arg_location) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setLocation', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_location]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setLocationTracking(bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setLocationTracking', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUserProfileID(String? arg_userProfileID) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.setUserProfileID', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_userProfileID]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> handlePluginInitFinished() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.handlePluginInitFinished', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> touchReporter(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaPigeon.touchReporter', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class AppMetricaLibraryAdapterPigeon {
  /// Constructor for [AppMetricaLibraryAdapterPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  AppMetricaLibraryAdapterPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<void> subscribeForAutoCollectedData(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.AppMetricaLibraryAdapterPigeon.subscribeForAutoCollectedData', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class _ReporterPigeonCodec extends StandardMessageCodec {
  const _ReporterPigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is AdRevenuePigeon) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceAmountPigeon) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceCartItemPigeon) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceEventPigeon) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceOrderPigeon) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is ECommercePricePigeon) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceProductPigeon) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceReferrerPigeon) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is ECommerceScreenPigeon) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is ErrorDetailsPigeon) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is ReceiptPigeon) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is RevenuePigeon) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is StackTraceElementPigeon) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else if (value is UserProfileAttributePigeon) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else if (value is UserProfilePigeon) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return AdRevenuePigeon.decode(readValue(buffer)!);
      case 129: 
        return ECommerceAmountPigeon.decode(readValue(buffer)!);
      case 130: 
        return ECommerceAmountPigeon.decode(readValue(buffer)!);
      case 131: 
        return ECommerceCartItemPigeon.decode(readValue(buffer)!);
      case 132: 
        return ECommerceEventPigeon.decode(readValue(buffer)!);
      case 133: 
        return ECommerceOrderPigeon.decode(readValue(buffer)!);
      case 134: 
        return ECommercePricePigeon.decode(readValue(buffer)!);
      case 135: 
        return ECommercePricePigeon.decode(readValue(buffer)!);
      case 136: 
        return ECommerceProductPigeon.decode(readValue(buffer)!);
      case 137: 
        return ECommerceProductPigeon.decode(readValue(buffer)!);
      case 138: 
        return ECommerceReferrerPigeon.decode(readValue(buffer)!);
      case 139: 
        return ECommerceScreenPigeon.decode(readValue(buffer)!);
      case 140: 
        return ErrorDetailsPigeon.decode(readValue(buffer)!);
      case 141: 
        return ErrorDetailsPigeon.decode(readValue(buffer)!);
      case 142: 
        return ReceiptPigeon.decode(readValue(buffer)!);
      case 143: 
        return RevenuePigeon.decode(readValue(buffer)!);
      case 144: 
        return StackTraceElementPigeon.decode(readValue(buffer)!);
      case 145: 
        return UserProfileAttributePigeon.decode(readValue(buffer)!);
      case 146: 
        return UserProfilePigeon.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class ReporterPigeon {
  /// Constructor for [ReporterPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  ReporterPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _ReporterPigeonCodec();

  Future<void> clearAppEnvironment(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.clearAppEnvironment', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> pauseSession(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.pauseSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> putAppEnvironmentValue(String arg_apiKey, String arg_key, String? arg_value) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.putAppEnvironmentValue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_key, arg_value]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportAdRevenue(String arg_apiKey, AdRevenuePigeon arg_adRevenue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportAdRevenue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_adRevenue]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportECommerce(String arg_apiKey, ECommerceEventPigeon arg_event) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportECommerce', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_event]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportError(String arg_apiKey, ErrorDetailsPigeon arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportError', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_error, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportErrorWithGroup(String arg_apiKey, String arg_groupId, ErrorDetailsPigeon? arg_error, String? arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportErrorWithGroup', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_groupId, arg_error, arg_message]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportEvent(String arg_apiKey, String arg_eventName) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportEvent', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_eventName]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportEventWithJson(String arg_apiKey, String arg_eventName, String? arg_attributesJson) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportEventWithJson', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_eventName, arg_attributesJson]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportRevenue(String arg_apiKey, RevenuePigeon arg_revenue) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportRevenue', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_revenue]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportUnhandledException(String arg_apiKey, ErrorDetailsPigeon arg_error) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportUnhandledException', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_error]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> reportUserProfile(String arg_apiKey, UserProfilePigeon arg_userProfile) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.reportUserProfile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_userProfile]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> resumeSession(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.resumeSession', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> sendEventsBuffer(String arg_apiKey) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.sendEventsBuffer', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setDataSendingEnabled(String arg_apiKey, bool arg_enabled) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.setDataSendingEnabled', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_enabled]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setUserProfileID(String arg_apiKey, String? arg_userProfileID) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.ReporterPigeon.setUserProfileID', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_apiKey, arg_userProfileID]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}

class InitialDeepLinkHolderPigeon {
  /// Constructor for [InitialDeepLinkHolderPigeon].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  InitialDeepLinkHolderPigeon({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Future<String?> getInitialDeeplink() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.appmetrica_plugin.InitialDeepLinkHolderPigeon.getInitialDeeplink', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as String?);
    }
  }
}
